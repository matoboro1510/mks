
kostka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031ec  080031ec  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080031ec  080031ec  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031ec  080031ec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031ec  080031ec  000131ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031f0  080031f0  000131f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080031f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000068  0800325c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  0800325c  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007646  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000157d  00000000  00000000  00027719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  00028c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004e8  00000000  00000000  00029310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000104b6  00000000  00000000  000297f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fdc  00000000  00000000  00039cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005e6ac  00000000  00000000  00042c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f30  00000000  00000000  000a1338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000a3268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030a0 	.word	0x080030a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080030a0 	.word	0x080030a0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4699      	mov	r9, r3
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	469c      	mov	ip, r3
 8000412:	0413      	lsls	r3, r2, #16
 8000414:	4647      	mov	r7, r8
 8000416:	0c1b      	lsrs	r3, r3, #16
 8000418:	001d      	movs	r5, r3
 800041a:	000e      	movs	r6, r1
 800041c:	4661      	mov	r1, ip
 800041e:	0404      	lsls	r4, r0, #16
 8000420:	0c24      	lsrs	r4, r4, #16
 8000422:	b580      	push	{r7, lr}
 8000424:	0007      	movs	r7, r0
 8000426:	0c10      	lsrs	r0, r2, #16
 8000428:	434b      	muls	r3, r1
 800042a:	4365      	muls	r5, r4
 800042c:	4341      	muls	r1, r0
 800042e:	4360      	muls	r0, r4
 8000430:	0c2c      	lsrs	r4, r5, #16
 8000432:	18c0      	adds	r0, r0, r3
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4356      	muls	r6, r2
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	042d      	lsls	r5, r5, #16
 800044e:	0c2d      	lsrs	r5, r5, #16
 8000450:	1989      	adds	r1, r1, r6
 8000452:	4463      	add	r3, ip
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	18c9      	adds	r1, r1, r3
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046a:	f000 fb53 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046e:	f000 f851 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000472:	f000 f8c9 	bl	8000608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000476:	f000 f897 	bl	80005a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sct_init();
 800047a:	f000 f96c 	bl	8000756 <sct_init>
  uint8_t hod;
  uint32_t delay=10;
 800047e:	230a      	movs	r3, #10
 8000480:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == 0){
 8000482:	4b23      	ldr	r3, [pc, #140]	; (8000510 <main+0xac>)
 8000484:	2102      	movs	r1, #2
 8000486:	0018      	movs	r0, r3
 8000488:	f000 fdf0 	bl	800106c <HAL_GPIO_ReadPin>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d1f8      	bne.n	8000482 <main+0x1e>
		 hod = (rand() % 6) + 1;
 8000490:	f001 fde6 	bl	8002060 <rand>
 8000494:	0003      	movs	r3, r0
 8000496:	2106      	movs	r1, #6
 8000498:	0018      	movs	r0, r3
 800049a:	f7ff ffaf 	bl	80003fc <__aeabi_idivmod>
 800049e:	000b      	movs	r3, r1
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	1cfb      	adds	r3, r7, #3
 80004a4:	3201      	adds	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
		 for (int i=0; i<10;i++){
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e025      	b.n	80004fa <main+0x96>
			 for (int j=1;j<7;j++){
 80004ae:	2301      	movs	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	e01c      	b.n	80004ee <main+0x8a>
				 sct_value(j);
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 f99d 	bl	80007f8 <sct_value>
				 HAL_Delay(delay+i*10);
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	0013      	movs	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	189b      	adds	r3, r3, r2
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	001a      	movs	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fb84 	bl	8000bdc <HAL_Delay>
				 if(HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin)==0){
 80004d4:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <main+0xac>)
 80004d6:	2101      	movs	r1, #1
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fdc7 	bl	800106c <HAL_GPIO_ReadPin>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d102      	bne.n	80004e8 <main+0x84>
					 i=10;
 80004e2:	230a      	movs	r3, #10
 80004e4:	60fb      	str	r3, [r7, #12]
					 break;
 80004e6:	e005      	b.n	80004f4 <main+0x90>
			 for (int j=1;j<7;j++){
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	3301      	adds	r3, #1
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	2b06      	cmp	r3, #6
 80004f2:	dddf      	ble.n	80004b4 <main+0x50>
		 for (int i=0; i<10;i++){
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	3301      	adds	r3, #1
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	ddd6      	ble.n	80004ae <main+0x4a>
				 }
			 }
		 }
		  sct_value(hod);
 8000500:	1cfb      	adds	r3, r7, #3
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	0018      	movs	r0, r3
 8000508:	f000 f976 	bl	80007f8 <sct_value>
	  if(HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin) == 0){
 800050c:	e7b9      	b.n	8000482 <main+0x1e>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	48000800 	.word	0x48000800

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b091      	sub	sp, #68	; 0x44
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	2410      	movs	r4, #16
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2330      	movs	r3, #48	; 0x30
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f001 fee9 	bl	80022fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	003b      	movs	r3, r7
 800052c:	0018      	movs	r0, r3
 800052e:	2310      	movs	r3, #16
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f001 fee2 	bl	80022fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	0021      	movs	r1, r4
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2202      	movs	r2, #2
 800053e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2201      	movs	r2, #1
 8000544:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2210      	movs	r2, #16
 800054a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2202      	movs	r2, #2
 8000550:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	22a0      	movs	r2, #160	; 0xa0
 800055c:	0392      	lsls	r2, r2, #14
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	187b      	adds	r3, r7, r1
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fdb9 	bl	80010e0 <HAL_RCC_OscConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000572:	f000 f8eb 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	003b      	movs	r3, r7
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057c:	003b      	movs	r3, r7
 800057e:	2202      	movs	r2, #2
 8000580:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	003b      	movs	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000588:	003b      	movs	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800058e:	003b      	movs	r3, r7
 8000590:	2101      	movs	r1, #1
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f8be 	bl	8001714 <HAL_RCC_ClockConfig>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800059c:	f000 f8d6 	bl	800074c <Error_Handler>
  }
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	b011      	add	sp, #68	; 0x44
 80005a6:	bd90      	pop	{r4, r7, pc}

080005a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_USART2_UART_Init+0x5c>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005b4:	2296      	movs	r2, #150	; 0x96
 80005b6:	0212      	lsls	r2, r2, #8
 80005b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MX_USART2_UART_Init+0x58>)
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 f9e3 	bl	80019b8 <HAL_UART_Init>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f6:	f000 f8a9 	bl	800074c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000084 	.word	0x20000084
 8000604:	40004400 	.word	0x40004400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	2414      	movs	r4, #20
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2314      	movs	r3, #20
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f001 fe6f 	bl	80022fc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b48      	ldr	r3, [pc, #288]	; (8000740 <MX_GPIO_Init+0x138>)
 8000620:	695a      	ldr	r2, [r3, #20]
 8000622:	4b47      	ldr	r3, [pc, #284]	; (8000740 <MX_GPIO_Init+0x138>)
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	0309      	lsls	r1, r1, #12
 8000628:	430a      	orrs	r2, r1
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	4b44      	ldr	r3, [pc, #272]	; (8000740 <MX_GPIO_Init+0x138>)
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	031b      	lsls	r3, r3, #12
 8000634:	4013      	ands	r3, r2
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b41      	ldr	r3, [pc, #260]	; (8000740 <MX_GPIO_Init+0x138>)
 800063c:	695a      	ldr	r2, [r3, #20]
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <MX_GPIO_Init+0x138>)
 8000640:	2180      	movs	r1, #128	; 0x80
 8000642:	03c9      	lsls	r1, r1, #15
 8000644:	430a      	orrs	r2, r1
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <MX_GPIO_Init+0x138>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	03db      	lsls	r3, r3, #15
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <MX_GPIO_Init+0x138>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_GPIO_Init+0x138>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0289      	lsls	r1, r1, #10
 8000660:	430a      	orrs	r2, r1
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <MX_GPIO_Init+0x138>)
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	029b      	lsls	r3, r3, #10
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b33      	ldr	r3, [pc, #204]	; (8000740 <MX_GPIO_Init+0x138>)
 8000674:	695a      	ldr	r2, [r3, #20]
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_GPIO_Init+0x138>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	02c9      	lsls	r1, r1, #11
 800067c:	430a      	orrs	r2, r1
 800067e:	615a      	str	r2, [r3, #20]
 8000680:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <MX_GPIO_Init+0x138>)
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	02db      	lsls	r3, r3, #11
 8000688:	4013      	ands	r3, r2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fd05 	bl	80010a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin, GPIO_PIN_RESET);
 800069c:	2387      	movs	r3, #135	; 0x87
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4828      	ldr	r0, [pc, #160]	; (8000744 <MX_GPIO_Init+0x13c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f000 fcfe 	bl	80010a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0192      	lsls	r2, r2, #6
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2284      	movs	r2, #132	; 0x84
 80006b6:	0392      	lsls	r2, r2, #14
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	4a21      	ldr	r2, [pc, #132]	; (8000748 <MX_GPIO_Init+0x140>)
 80006c4:	0019      	movs	r1, r3
 80006c6:	0010      	movs	r0, r2
 80006c8:	f000 fb60 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2203      	movs	r2, #3
 80006d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2201      	movs	r2, #1
 80006dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <MX_GPIO_Init+0x140>)
 80006e2:	0019      	movs	r1, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f000 fb51 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2220      	movs	r2, #32
 80006ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2201      	movs	r2, #1
 80006f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000702:	193a      	adds	r2, r7, r4
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f000 fb3e 	bl	8000d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SCT_NOE_Pin SCT_CLK_Pin SCT_SDI_Pin SCT_NLA_Pin */
  GPIO_InitStruct.Pin = SCT_NOE_Pin|SCT_CLK_Pin|SCT_SDI_Pin|SCT_NLA_Pin;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2287      	movs	r2, #135	; 0x87
 8000716:	00d2      	lsls	r2, r2, #3
 8000718:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	187b      	adds	r3, r7, r1
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <MX_GPIO_Init+0x13c>)
 8000730:	0019      	movs	r1, r3
 8000732:	0010      	movs	r0, r2
 8000734:	f000 fb2a 	bl	8000d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b00b      	add	sp, #44	; 0x2c
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400
 8000748:	48000800 	.word	0x48000800

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>

08000756 <sct_init>:
 *      Author: matej
 */
#include "main.h"
#include "sct.h"

void sct_init(void) {
 8000756:	b580      	push	{r7, lr}
 8000758:	af00      	add	r7, sp, #0

	sct_led(0);
 800075a:	2000      	movs	r0, #0
 800075c:	f000 f804 	bl	8000768 <sct_led>
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <sct_led>:

void sct_led(uint32_t value) {
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 32; i++) {
 8000770:	230f      	movs	r3, #15
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e01f      	b.n	80007ba <sct_led+0x52>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_SDI_Pin, (value >> i) & 1);
 800077a:	240f      	movs	r4, #15
 800077c:	193b      	adds	r3, r7, r4
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	40da      	lsrs	r2, r3
 8000784:	0013      	movs	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2201      	movs	r2, #1
 800078a:	4013      	ands	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <sct_led+0x8c>)
 8000790:	001a      	movs	r2, r3
 8000792:	2110      	movs	r1, #16
 8000794:	f000 fc87 	bl	80010a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 1);
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <sct_led+0x8c>)
 800079a:	2201      	movs	r2, #1
 800079c:	2108      	movs	r1, #8
 800079e:	0018      	movs	r0, r3
 80007a0:	f000 fc81 	bl	80010a6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCT_CLK_GPIO_Port, SCT_CLK_Pin, 0);
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <sct_led+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fc7b 	bl	80010a6 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 32; i++) {
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	3201      	adds	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
 80007ba:	230f      	movs	r3, #15
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b1f      	cmp	r3, #31
 80007c2:	d9da      	bls.n	800077a <sct_led+0x12>
	}
// Latch the value from the shift register to the output latch register
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 1);
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <sct_led+0x8c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	2120      	movs	r1, #32
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fc6b 	bl	80010a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCT_NLA_GPIO_Port, SCT_NLA_Pin, 0);
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <sct_led+0x8c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	2120      	movs	r1, #32
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fc65 	bl	80010a6 <HAL_GPIO_WritePin>

	// Enable outputs
	HAL_GPIO_WritePin(SCT_NOE_GPIO_Port, SCT_NOE_Pin, 0);
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <sct_led+0x8c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	0019      	movs	r1, r3
 80007e6:	f000 fc5e 	bl	80010a6 <HAL_GPIO_WritePin>

}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b005      	add	sp, #20
 80007f0:	bd90      	pop	{r4, r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	48000400 	.word	0x48000400

080007f8 <sct_value>:
	0b00100000000010100010000000001010 << 0,

	},
};

void sct_value(uint16_t value){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dbb      	adds	r3, r7, #6
 8000802:	801a      	strh	r2, [r3, #0]
	uint32_t reg=0;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	reg |= reg_values[0][value];
 8000808:	1dbb      	adds	r3, r7, #6
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <sct_value+0x30>)
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	58d3      	ldr	r3, [r2, r3]
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	4313      	orrs	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]


	sct_led(reg);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff ffa4 	bl	8000768 <sct_led>
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b004      	add	sp, #16
 8000826:	bd80      	pop	{r7, pc}
 8000828:	080030d8 	.word	0x080030d8

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <HAL_MspInit+0x44>)
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_MspInit+0x44>)
 8000838:	2101      	movs	r1, #1
 800083a:	430a      	orrs	r2, r1
 800083c:	619a      	str	r2, [r3, #24]
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_MspInit+0x44>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	2201      	movs	r2, #1
 8000844:	4013      	ands	r3, r2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x44>)
 800084c:	69da      	ldr	r2, [r3, #28]
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <HAL_MspInit+0x44>)
 8000850:	2180      	movs	r1, #128	; 0x80
 8000852:	0549      	lsls	r1, r1, #21
 8000854:	430a      	orrs	r2, r1
 8000856:	61da      	str	r2, [r3, #28]
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_MspInit+0x44>)
 800085a:	69da      	ldr	r2, [r3, #28]
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	055b      	lsls	r3, r3, #21
 8000860:	4013      	ands	r3, r2
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40021000 	.word	0x40021000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08b      	sub	sp, #44	; 0x2c
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	2414      	movs	r4, #20
 800087e:	193b      	adds	r3, r7, r4
 8000880:	0018      	movs	r0, r3
 8000882:	2314      	movs	r3, #20
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f001 fd38 	bl	80022fc <memset>
  if(huart->Instance==USART2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <HAL_UART_MspInit+0x90>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d132      	bne.n	80008fc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_UART_MspInit+0x94>)
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <HAL_UART_MspInit+0x94>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0289      	lsls	r1, r1, #10
 80008a0:	430a      	orrs	r2, r1
 80008a2:	61da      	str	r2, [r3, #28]
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008a6:	69da      	ldr	r2, [r3, #28]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	029b      	lsls	r3, r3, #10
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008b4:	695a      	ldr	r2, [r3, #20]
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0289      	lsls	r1, r1, #10
 80008bc:	430a      	orrs	r2, r1
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_UART_MspInit+0x94>)
 80008c2:	695a      	ldr	r2, [r3, #20]
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	029b      	lsls	r3, r3, #10
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ce:	0021      	movs	r1, r4
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2202      	movs	r2, #2
 80008da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	187a      	adds	r2, r7, r1
 80008f0:	2390      	movs	r3, #144	; 0x90
 80008f2:	05db      	lsls	r3, r3, #23
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fa48 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00b      	add	sp, #44	; 0x2c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40004400 	.word	0x40004400
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f938 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  return 1;
 800093e:	2301      	movs	r3, #1
}
 8000940:	0018      	movs	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_kill>:

int _kill(int pid, int sig)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000950:	f001 fd2a 	bl	80023a8 <__errno>
 8000954:	0003      	movs	r3, r0
 8000956:	2216      	movs	r2, #22
 8000958:	601a      	str	r2, [r3, #0]
  return -1;
 800095a:	2301      	movs	r3, #1
 800095c:	425b      	negs	r3, r3
}
 800095e:	0018      	movs	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	b002      	add	sp, #8
 8000964:	bd80      	pop	{r7, pc}

08000966 <_exit>:

void _exit (int status)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800096e:	2301      	movs	r3, #1
 8000970:	425a      	negs	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff ffe5 	bl	8000946 <_kill>
  while (1) {}    /* Make sure we hang here */
 800097c:	e7fe      	b.n	800097c <_exit+0x16>

0800097e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e00a      	b.n	80009a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000990:	e000      	b.n	8000994 <_read+0x16>
 8000992:	bf00      	nop
 8000994:	0001      	movs	r1, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	60ba      	str	r2, [r7, #8]
 800099c:	b2ca      	uxtb	r2, r1
 800099e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	dbf0      	blt.n	8000990 <_read+0x12>
  }

  return len;
 80009ae:	687b      	ldr	r3, [r7, #4]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b006      	add	sp, #24
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e009      	b.n	80009de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	60ba      	str	r2, [r7, #8]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0018      	movs	r0, r3
 80009d4:	e000      	b.n	80009d8 <_write+0x20>
 80009d6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	3301      	adds	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dbf1      	blt.n	80009ca <_write+0x12>
  }
  return len;
 80009e6:	687b      	ldr	r3, [r7, #4]
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b006      	add	sp, #24
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_close>:

int _close(int file)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	425b      	negs	r3, r3
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	2280      	movs	r2, #128	; 0x80
 8000a12:	0192      	lsls	r2, r2, #6
 8000a14:	605a      	str	r2, [r3, #4]
  return 0;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_isatty>:

int _isatty(int file)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a28:	2301      	movs	r3, #1
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	60f8      	str	r0, [r7, #12]
 8000a3a:	60b9      	str	r1, [r7, #8]
 8000a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b004      	add	sp, #16
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f001 fc96 	bl	80023a8 <__errno>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	425b      	negs	r3, r3
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	18d2      	adds	r2, r2, r3
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b006      	add	sp, #24
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20002000 	.word	0x20002000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	20000108 	.word	0x20000108
 8000ab0:	20000260 	.word	0x20000260

08000ab4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ac2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000aea:	f7ff ffe3 	bl	8000ab4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000aee:	f001 fc61 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af2:	f7ff fcb7 	bl	8000464 <main>

08000af6 <LoopForever>:

LoopForever:
    b LoopForever
 8000af6:	e7fe      	b.n	8000af6 <LoopForever>
  ldr   r0, =_estack
 8000af8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b04:	080031f4 	.word	0x080031f4
  ldr r2, =_sbss
 8000b08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b0c:	2000025c 	.word	0x2000025c

08000b10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_IRQHandler>
	...

08000b14 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_Init+0x24>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_Init+0x24>)
 8000b1e:	2110      	movs	r1, #16
 8000b20:	430a      	orrs	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f809 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2a:	f7ff fe7f 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_InitTick+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	23fa      	movs	r3, #250	; 0xfa
 8000b50:	0098      	lsls	r0, r3, #2
 8000b52:	f7ff fae3 	bl	800011c <__udivsi3>
 8000b56:	0003      	movs	r3, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f7ff fade 	bl	800011c <__udivsi3>
 8000b60:	0003      	movs	r3, r0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f905 	bl	8000d72 <HAL_SYSTICK_Config>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e00f      	b.n	8000b90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d80b      	bhi.n	8000b8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f8e2 	bl	8000d48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_InitTick+0x64>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b003      	add	sp, #12
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	2000010c 	.word	0x2000010c

08000bc8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	2000010c 	.word	0x2000010c

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b7f      	cmp	r3, #127	; 0x7f
 8000c38:	d828      	bhi.n	8000c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	33c0      	adds	r3, #192	; 0xc0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	589b      	ldr	r3, [r3, r2]
 8000c4a:	1dfa      	adds	r2, r7, #7
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	0011      	movs	r1, r2
 8000c50:	2203      	movs	r2, #3
 8000c52:	400a      	ands	r2, r1
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	21ff      	movs	r1, #255	; 0xff
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	401a      	ands	r2, r3
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2303      	movs	r3, #3
 8000c72:	4003      	ands	r3, r0
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	481f      	ldr	r0, [pc, #124]	; (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	430a      	orrs	r2, r1
 8000c84:	33c0      	adds	r3, #192	; 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c8a:	e031      	b.n	8000cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0019      	movs	r1, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	400b      	ands	r3, r1
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3306      	adds	r3, #6
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1dfa      	adds	r2, r7, #7
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	0011      	movs	r1, r2
 8000cac:	2203      	movs	r2, #3
 8000cae:	400a      	ands	r2, r1
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	21ff      	movs	r1, #255	; 0xff
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	22ff      	movs	r2, #255	; 0xff
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2303      	movs	r3, #3
 8000cce:	4003      	ands	r3, r0
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001c      	movs	r4, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	4023      	ands	r3, r4
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	3306      	adds	r3, #6
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	18c3      	adds	r3, r0, r3
 8000cec:	3304      	adds	r3, #4
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b003      	add	sp, #12
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	045b      	lsls	r3, r3, #17
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d301      	bcc.n	8000d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d14:	2301      	movs	r3, #1
 8000d16:	e010      	b.n	8000d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SysTick_Config+0x44>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	2103      	movs	r1, #3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff ff7c 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x44>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	210f      	movs	r1, #15
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	1c02      	adds	r2, r0, #0
 8000d58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ffbf 	bl	8000d00 <SysTick_Config>
 8000d82:	0003      	movs	r3, r0
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	e14f      	b.n	800103c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2101      	movs	r1, #1
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d100      	bne.n	8000db4 <HAL_GPIO_Init+0x28>
 8000db2:	e140      	b.n	8001036 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d005      	beq.n	8000dcc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d130      	bne.n	8000e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	409a      	lsls	r2, r3
 8000dee:	0013      	movs	r3, r2
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e02:	2201      	movs	r2, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	091b      	lsrs	r3, r3, #4
 8000e18:	2201      	movs	r2, #1
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d017      	beq.n	8000e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689a      	ldr	r2, [r3, #8]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2203      	movs	r2, #3
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d123      	bne.n	8000ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	08da      	lsrs	r2, r3, #3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	3208      	adds	r2, #8
 8000e7e:	0092      	lsls	r2, r2, #2
 8000e80:	58d3      	ldr	r3, [r2, r3]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	2207      	movs	r2, #7
 8000e88:	4013      	ands	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	220f      	movs	r2, #15
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	6939      	ldr	r1, [r7, #16]
 8000ebc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2203      	movs	r2, #3
 8000edc:	401a      	ands	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	23c0      	movs	r3, #192	; 0xc0
 8000ef8:	029b      	lsls	r3, r3, #10
 8000efa:	4013      	ands	r3, r2
 8000efc:	d100      	bne.n	8000f00 <HAL_GPIO_Init+0x174>
 8000efe:	e09a      	b.n	8001036 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b54      	ldr	r3, [pc, #336]	; (8001054 <HAL_GPIO_Init+0x2c8>)
 8000f02:	699a      	ldr	r2, [r3, #24]
 8000f04:	4b53      	ldr	r3, [pc, #332]	; (8001054 <HAL_GPIO_Init+0x2c8>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	619a      	str	r2, [r3, #24]
 8000f0c:	4b51      	ldr	r3, [pc, #324]	; (8001054 <HAL_GPIO_Init+0x2c8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f18:	4a4f      	ldr	r2, [pc, #316]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	589b      	ldr	r3, [r3, r2]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2203      	movs	r2, #3
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	409a      	lsls	r2, r3
 8000f32:	0013      	movs	r3, r2
 8000f34:	43da      	mvns	r2, r3
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	2390      	movs	r3, #144	; 0x90
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a44      	ldr	r2, [pc, #272]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x1de>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a43      	ldr	r2, [pc, #268]	; (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x1da>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a42      	ldr	r2, [pc, #264]	; (8001064 <HAL_GPIO_Init+0x2d8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x1d6>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x1e4>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	2103      	movs	r1, #3
 8000f74:	400a      	ands	r2, r1
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f80:	4935      	ldr	r1, [pc, #212]	; (8001058 <HAL_GPIO_Init+0x2cc>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	025b      	lsls	r3, r3, #9
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	035b      	lsls	r3, r3, #13
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	039b      	lsls	r3, r3, #14
 8001024:	4013      	ands	r3, r2
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	40da      	lsrs	r2, r3
 8001044:	1e13      	subs	r3, r2, #0
 8001046:	d000      	beq.n	800104a <HAL_GPIO_Init+0x2be>
 8001048:	e6a8      	b.n	8000d9c <HAL_GPIO_Init+0x10>
  } 
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	000a      	movs	r2, r1
 8001076:	1cbb      	adds	r3, r7, #2
 8001078:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	1cba      	adds	r2, r7, #2
 8001080:	8812      	ldrh	r2, [r2, #0]
 8001082:	4013      	ands	r3, r2
 8001084:	d004      	beq.n	8001090 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001086:	230f      	movs	r3, #15
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
 800108e:	e003      	b.n	8001098 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001090:	230f      	movs	r3, #15
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001098:	230f      	movs	r3, #15
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
  }
 800109e:	0018      	movs	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b004      	add	sp, #16
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	0008      	movs	r0, r1
 80010b0:	0011      	movs	r1, r2
 80010b2:	1cbb      	adds	r3, r7, #2
 80010b4:	1c02      	adds	r2, r0, #0
 80010b6:	801a      	strh	r2, [r3, #0]
 80010b8:	1c7b      	adds	r3, r7, #1
 80010ba:	1c0a      	adds	r2, r1, #0
 80010bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010be:	1c7b      	adds	r3, r7, #1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c6:	1cbb      	adds	r3, r7, #2
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ce:	e003      	b.n	80010d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d0:	1cbb      	adds	r3, r7, #2
 80010d2:	881a      	ldrh	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e301      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	d100      	bne.n	80010fe <HAL_RCC_OscConfig+0x1e>
 80010fc:	e08d      	b.n	800121a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010fe:	4bc3      	ldr	r3, [pc, #780]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	220c      	movs	r2, #12
 8001104:	4013      	ands	r3, r2
 8001106:	2b04      	cmp	r3, #4
 8001108:	d00e      	beq.n	8001128 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800110a:	4bc0      	ldr	r3, [pc, #768]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	220c      	movs	r2, #12
 8001110:	4013      	ands	r3, r2
 8001112:	2b08      	cmp	r3, #8
 8001114:	d116      	bne.n	8001144 <HAL_RCC_OscConfig+0x64>
 8001116:	4bbd      	ldr	r3, [pc, #756]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	401a      	ands	r2, r3
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	025b      	lsls	r3, r3, #9
 8001124:	429a      	cmp	r2, r3
 8001126:	d10d      	bne.n	8001144 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4bb8      	ldr	r3, [pc, #736]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d100      	bne.n	8001136 <HAL_RCC_OscConfig+0x56>
 8001134:	e070      	b.n	8001218 <HAL_RCC_OscConfig+0x138>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d000      	beq.n	8001140 <HAL_RCC_OscConfig+0x60>
 800113e:	e06b      	b.n	8001218 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e2d8      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d107      	bne.n	800115c <HAL_RCC_OscConfig+0x7c>
 800114c:	4baf      	ldr	r3, [pc, #700]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4bae      	ldr	r3, [pc, #696]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e02f      	b.n	80011bc <HAL_RCC_OscConfig+0xdc>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x9e>
 8001164:	4ba9      	ldr	r3, [pc, #676]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4ba8      	ldr	r3, [pc, #672]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800116a:	49a9      	ldr	r1, [pc, #676]	; (8001410 <HAL_RCC_OscConfig+0x330>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4ba6      	ldr	r3, [pc, #664]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4ba5      	ldr	r3, [pc, #660]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001176:	49a7      	ldr	r1, [pc, #668]	; (8001414 <HAL_RCC_OscConfig+0x334>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e01e      	b.n	80011bc <HAL_RCC_OscConfig+0xdc>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d10e      	bne.n	80011a4 <HAL_RCC_OscConfig+0xc4>
 8001186:	4ba1      	ldr	r3, [pc, #644]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4ba0      	ldr	r3, [pc, #640]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	02c9      	lsls	r1, r1, #11
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	4b9d      	ldr	r3, [pc, #628]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b9c      	ldr	r3, [pc, #624]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0249      	lsls	r1, r1, #9
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xdc>
 80011a4:	4b99      	ldr	r3, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b98      	ldr	r3, [pc, #608]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80011aa:	4999      	ldr	r1, [pc, #612]	; (8001410 <HAL_RCC_OscConfig+0x330>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	4b96      	ldr	r3, [pc, #600]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b95      	ldr	r3, [pc, #596]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80011b6:	4997      	ldr	r1, [pc, #604]	; (8001414 <HAL_RCC_OscConfig+0x334>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d014      	beq.n	80011ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fd00 	bl	8000bc8 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ce:	f7ff fcfb 	bl	8000bc8 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b64      	cmp	r3, #100	; 0x64
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e28a      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e0:	4b8a      	ldr	r3, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0xee>
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fceb 	bl	8000bc8 <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fce6 	bl	8000bc8 <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e275      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b80      	ldr	r3, [pc, #512]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	4013      	ands	r3, r2
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x118>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x146>
 8001224:	e069      	b.n	80012fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001226:	4b79      	ldr	r3, [pc, #484]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	220c      	movs	r2, #12
 800122c:	4013      	ands	r3, r2
 800122e:	d00b      	beq.n	8001248 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001230:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	220c      	movs	r2, #12
 8001236:	4013      	ands	r3, r2
 8001238:	2b08      	cmp	r3, #8
 800123a:	d11c      	bne.n	8001276 <HAL_RCC_OscConfig+0x196>
 800123c:	4b73      	ldr	r3, [pc, #460]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	4013      	ands	r3, r2
 8001246:	d116      	bne.n	8001276 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001248:	4b70      	ldr	r3, [pc, #448]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2202      	movs	r2, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d005      	beq.n	800125e <HAL_RCC_OscConfig+0x17e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e24b      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125e:	4b6b      	ldr	r3, [pc, #428]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	22f8      	movs	r2, #248	; 0xf8
 8001264:	4393      	bics	r3, r2
 8001266:	0019      	movs	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	00da      	lsls	r2, r3, #3
 800126e:	4b67      	ldr	r3, [pc, #412]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001274:	e041      	b.n	80012fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d024      	beq.n	80012c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001284:	2101      	movs	r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fc9d 	bl	8000bc8 <HAL_GetTick>
 800128e:	0003      	movs	r3, r0
 8001290:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001294:	f7ff fc98 	bl	8000bc8 <HAL_GetTick>
 8001298:	0002      	movs	r2, r0
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e227      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a6:	4b59      	ldr	r3, [pc, #356]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2202      	movs	r2, #2
 80012ac:	4013      	ands	r3, r2
 80012ae:	d0f1      	beq.n	8001294 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	22f8      	movs	r2, #248	; 0xf8
 80012b6:	4393      	bics	r3, r2
 80012b8:	0019      	movs	r1, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00da      	lsls	r2, r3, #3
 80012c0:	4b52      	ldr	r3, [pc, #328]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e018      	b.n	80012fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b4f      	ldr	r3, [pc, #316]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80012ce:	2101      	movs	r1, #1
 80012d0:	438a      	bics	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fc78 	bl	8000bc8 <HAL_GetTick>
 80012d8:	0003      	movs	r3, r0
 80012da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fc73 	bl	8000bc8 <HAL_GetTick>
 80012e2:	0002      	movs	r2, r0
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e202      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2202      	movs	r2, #2
 80012f6:	4013      	ands	r3, r2
 80012f8:	d1f1      	bne.n	80012de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2208      	movs	r2, #8
 8001300:	4013      	ands	r3, r2
 8001302:	d036      	beq.n	8001372 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d019      	beq.n	8001340 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800130c:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800130e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001310:	4b3e      	ldr	r3, [pc, #248]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001312:	2101      	movs	r1, #1
 8001314:	430a      	orrs	r2, r1
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fc56 	bl	8000bc8 <HAL_GetTick>
 800131c:	0003      	movs	r3, r0
 800131e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fc51 	bl	8000bc8 <HAL_GetTick>
 8001326:	0002      	movs	r2, r0
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e1e0      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	2202      	movs	r2, #2
 800133a:	4013      	ands	r3, r2
 800133c:	d0f1      	beq.n	8001322 <HAL_RCC_OscConfig+0x242>
 800133e:	e018      	b.n	8001372 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001340:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001346:	2101      	movs	r1, #1
 8001348:	438a      	bics	r2, r1
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fc3c 	bl	8000bc8 <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fc37 	bl	8000bc8 <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e1c6      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001368:	4b28      	ldr	r3, [pc, #160]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	2202      	movs	r2, #2
 800136e:	4013      	ands	r3, r2
 8001370:	d1f1      	bne.n	8001356 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2204      	movs	r2, #4
 8001378:	4013      	ands	r3, r2
 800137a:	d100      	bne.n	800137e <HAL_RCC_OscConfig+0x29e>
 800137c:	e0b4      	b.n	80014e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	201f      	movs	r0, #31
 8001380:	183b      	adds	r3, r7, r0
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001388:	69da      	ldr	r2, [r3, #28]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	055b      	lsls	r3, r3, #21
 800138e:	4013      	ands	r3, r2
 8001390:	d110      	bne.n	80013b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0549      	lsls	r1, r1, #21
 800139c:	430a      	orrs	r2, r1
 800139e:	61da      	str	r2, [r3, #28]
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 80013a2:	69da      	ldr	r2, [r3, #28]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	055b      	lsls	r3, r3, #21
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013ae:	183b      	adds	r3, r7, r0
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_RCC_OscConfig+0x338>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d11a      	bne.n	80013f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_RCC_OscConfig+0x338>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_RCC_OscConfig+0x338>)
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	0049      	lsls	r1, r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbfb 	bl	8000bc8 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d8:	f7ff fbf6 	bl	8000bc8 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e185      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x338>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10e      	bne.n	800141c <HAL_RCC_OscConfig+0x33c>
 80013fe:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_RCC_OscConfig+0x32c>)
 8001404:	2101      	movs	r1, #1
 8001406:	430a      	orrs	r2, r1
 8001408:	621a      	str	r2, [r3, #32]
 800140a:	e035      	b.n	8001478 <HAL_RCC_OscConfig+0x398>
 800140c:	40021000 	.word	0x40021000
 8001410:	fffeffff 	.word	0xfffeffff
 8001414:	fffbffff 	.word	0xfffbffff
 8001418:	40007000 	.word	0x40007000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x35e>
 8001424:	4bb6      	ldr	r3, [pc, #728]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	4bb5      	ldr	r3, [pc, #724]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800142a:	2101      	movs	r1, #1
 800142c:	438a      	bics	r2, r1
 800142e:	621a      	str	r2, [r3, #32]
 8001430:	4bb3      	ldr	r3, [pc, #716]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	4bb2      	ldr	r3, [pc, #712]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001436:	2104      	movs	r1, #4
 8001438:	438a      	bics	r2, r1
 800143a:	621a      	str	r2, [r3, #32]
 800143c:	e01c      	b.n	8001478 <HAL_RCC_OscConfig+0x398>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x380>
 8001446:	4bae      	ldr	r3, [pc, #696]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4bad      	ldr	r3, [pc, #692]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800144c:	2104      	movs	r1, #4
 800144e:	430a      	orrs	r2, r1
 8001450:	621a      	str	r2, [r3, #32]
 8001452:	4bab      	ldr	r3, [pc, #684]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001454:	6a1a      	ldr	r2, [r3, #32]
 8001456:	4baa      	ldr	r3, [pc, #680]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001458:	2101      	movs	r1, #1
 800145a:	430a      	orrs	r2, r1
 800145c:	621a      	str	r2, [r3, #32]
 800145e:	e00b      	b.n	8001478 <HAL_RCC_OscConfig+0x398>
 8001460:	4ba7      	ldr	r3, [pc, #668]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	4ba6      	ldr	r3, [pc, #664]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001466:	2101      	movs	r1, #1
 8001468:	438a      	bics	r2, r1
 800146a:	621a      	str	r2, [r3, #32]
 800146c:	4ba4      	ldr	r3, [pc, #656]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800146e:	6a1a      	ldr	r2, [r3, #32]
 8001470:	4ba3      	ldr	r3, [pc, #652]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001472:	2104      	movs	r1, #4
 8001474:	438a      	bics	r2, r1
 8001476:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d014      	beq.n	80014aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff fba2 	bl	8000bc8 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001488:	e009      	b.n	800149e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fb9d 	bl	8000bc8 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a9b      	ldr	r2, [pc, #620]	; (8001704 <HAL_RCC_OscConfig+0x624>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e12b      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149e:	4b98      	ldr	r3, [pc, #608]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d0f0      	beq.n	800148a <HAL_RCC_OscConfig+0x3aa>
 80014a8:	e013      	b.n	80014d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb8d 	bl	8000bc8 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b2:	e009      	b.n	80014c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f7ff fb88 	bl	8000bc8 <HAL_GetTick>
 80014b8:	0002      	movs	r2, r0
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4a91      	ldr	r2, [pc, #580]	; (8001704 <HAL_RCC_OscConfig+0x624>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e116      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c8:	4b8d      	ldr	r3, [pc, #564]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	2202      	movs	r2, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014d2:	231f      	movs	r3, #31
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	4b87      	ldr	r3, [pc, #540]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80014e2:	4989      	ldr	r1, [pc, #548]	; (8001708 <HAL_RCC_OscConfig+0x628>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2210      	movs	r2, #16
 80014ee:	4013      	ands	r3, r2
 80014f0:	d063      	beq.n	80015ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d12a      	bne.n	8001550 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014fa:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fe:	4b80      	ldr	r3, [pc, #512]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001500:	2104      	movs	r1, #4
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001506:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150a:	4b7d      	ldr	r3, [pc, #500]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800150c:	2101      	movs	r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fb59 	bl	8000bc8 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800151c:	f7ff fb54 	bl	8000bc8 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0e3      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800152e:	4b74      	ldr	r3, [pc, #464]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2202      	movs	r2, #2
 8001534:	4013      	ands	r3, r2
 8001536:	d0f1      	beq.n	800151c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001538:	4b71      	ldr	r3, [pc, #452]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800153a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153c:	22f8      	movs	r2, #248	; 0xf8
 800153e:	4393      	bics	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	00da      	lsls	r2, r3, #3
 8001548:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800154a:	430a      	orrs	r2, r1
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
 800154e:	e034      	b.n	80015ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	3305      	adds	r3, #5
 8001556:	d111      	bne.n	800157c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800155a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155c:	4b68      	ldr	r3, [pc, #416]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800155e:	2104      	movs	r1, #4
 8001560:	438a      	bics	r2, r1
 8001562:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001564:	4b66      	ldr	r3, [pc, #408]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	22f8      	movs	r2, #248	; 0xf8
 800156a:	4393      	bics	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	00da      	lsls	r2, r3, #3
 8001574:	4b62      	ldr	r3, [pc, #392]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001576:	430a      	orrs	r2, r1
 8001578:	635a      	str	r2, [r3, #52]	; 0x34
 800157a:	e01e      	b.n	80015ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800157c:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800157e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001580:	4b5f      	ldr	r3, [pc, #380]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001582:	2104      	movs	r1, #4
 8001584:	430a      	orrs	r2, r1
 8001586:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001588:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800158a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158c:	4b5c      	ldr	r3, [pc, #368]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800158e:	2101      	movs	r1, #1
 8001590:	438a      	bics	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff fb18 	bl	8000bc8 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800159e:	f7ff fb13 	bl	8000bc8 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0a2      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015b0:	4b53      	ldr	r3, [pc, #332]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80015b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b4:	2202      	movs	r2, #2
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f1      	bne.n	800159e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d100      	bne.n	80015c4 <HAL_RCC_OscConfig+0x4e4>
 80015c2:	e097      	b.n	80016f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	220c      	movs	r2, #12
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x4f2>
 80015d0:	e06b      	b.n	80016aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d14c      	bne.n	8001674 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b48      	ldr	r3, [pc, #288]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80015e0:	494a      	ldr	r1, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x62c>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff faef 	bl	8000bc8 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff faea 	bl	8000bc8 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e079      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	049b      	lsls	r3, r3, #18
 800160a:	4013      	ands	r3, r2
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	220f      	movs	r2, #15
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <HAL_RCC_OscConfig+0x630>)
 8001628:	4013      	ands	r3, r2
 800162a:	0019      	movs	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	431a      	orrs	r2, r3
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b30      	ldr	r3, [pc, #192]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0449      	lsls	r1, r1, #17
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fabd 	bl	8000bc8 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fab8 	bl	8000bc8 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e047      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	049b      	lsls	r3, r3, #18
 800166e:	4013      	ands	r3, r2
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x574>
 8001672:	e03f      	b.n	80016f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800167a:	4924      	ldr	r1, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x62c>)
 800167c:	400a      	ands	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff faa2 	bl	8000bc8 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fa9d 	bl	8000bc8 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e02c      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	049b      	lsls	r3, r3, #18
 80016a4:	4013      	ands	r3, r2
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x5aa>
 80016a8:	e024      	b.n	80016f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e01f      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80016b6:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80016bc:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x620>)
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d10e      	bne.n	80016f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	220f      	movs	r2, #15
 80016d6:	401a      	ands	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	23f0      	movs	r3, #240	; 0xf0
 80016e4:	039b      	lsls	r3, r3, #14
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	0018      	movs	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b008      	add	sp, #32
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	40021000 	.word	0x40021000
 8001704:	00001388 	.word	0x00001388
 8001708:	efffffff 	.word	0xefffffff
 800170c:	feffffff 	.word	0xfeffffff
 8001710:	ffc2ffff 	.word	0xffc2ffff

08001714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0b3      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2201      	movs	r2, #1
 800172e:	4013      	ands	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d911      	bls.n	800175a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001748:	4b53      	ldr	r3, [pc, #332]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d001      	beq.n	800175a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e09a      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d015      	beq.n	8001790 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2204      	movs	r2, #4
 800176a:	4013      	ands	r3, r2
 800176c:	d006      	beq.n	800177c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 8001774:	21e0      	movs	r1, #224	; 0xe0
 8001776:	00c9      	lsls	r1, r1, #3
 8001778:	430a      	orrs	r2, r1
 800177a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800177c:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	22f0      	movs	r2, #240	; 0xf0
 8001782:	4393      	bics	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 800178c:	430a      	orrs	r2, r1
 800178e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	4013      	ands	r3, r2
 8001798:	d040      	beq.n	800181c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	029b      	lsls	r3, r3, #10
 80017aa:	4013      	ands	r3, r2
 80017ac:	d114      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06e      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ba:	4b38      	ldr	r3, [pc, #224]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	049b      	lsls	r3, r3, #18
 80017c2:	4013      	ands	r3, r2
 80017c4:	d108      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e062      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	4b34      	ldr	r3, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e05b      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ec:	f7ff f9ec 	bl	8000bc8 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f4:	e009      	b.n	800180a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f6:	f7ff f9e7 	bl	8000bc8 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_RCC_ClockConfig+0x18c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e042      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	220c      	movs	r2, #12
 8001810:	401a      	ands	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	429a      	cmp	r2, r3
 800181a:	d1ec      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d211      	bcs.n	800184e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2201      	movs	r2, #1
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_RCC_ClockConfig+0x184>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2201      	movs	r2, #1
 8001842:	4013      	ands	r3, r2
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d001      	beq.n	800184e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e020      	b.n	8001890 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2204      	movs	r2, #4
 8001854:	4013      	ands	r3, r2
 8001856:	d009      	beq.n	800186c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_RCC_ClockConfig+0x190>)
 800185e:	4013      	ands	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800186c:	f000 f820 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 8001870:	0001      	movs	r1, r0
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_ClockConfig+0x188>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	220f      	movs	r2, #15
 800187a:	4013      	ands	r3, r2
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x194>)
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	000a      	movs	r2, r1
 8001882:	40da      	lsrs	r2, r3
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x198>)
 8001886:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff f957 	bl	8000b3c <HAL_InitTick>
  
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	0018      	movs	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	b004      	add	sp, #16
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40022000 	.word	0x40022000
 800189c:	40021000 	.word	0x40021000
 80018a0:	00001388 	.word	0x00001388
 80018a4:	fffff8ff 	.word	0xfffff8ff
 80018a8:	080030f4 	.word	0x080030f4
 80018ac:	20000000 	.word	0x20000000

080018b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08f      	sub	sp, #60	; 0x3c
 80018b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80018b6:	2314      	movs	r3, #20
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018be:	c313      	stmia	r3!, {r0, r1, r4}
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ca:	c313      	stmia	r3!, {r0, r1, r4}
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	220c      	movs	r2, #12
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d002      	beq.n	80018fa <HAL_RCC_GetSysClockFreq+0x4a>
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d003      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x50>
 80018f8:	e02d      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fe:	e02d      	b.n	800195c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	220f      	movs	r2, #15
 8001906:	4013      	ands	r3, r2
 8001908:	2214      	movs	r2, #20
 800190a:	18ba      	adds	r2, r7, r2
 800190c:	5cd3      	ldrb	r3, [r2, r3]
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	220f      	movs	r2, #15
 8001916:	4013      	ands	r3, r2
 8001918:	1d3a      	adds	r2, r7, #4
 800191a:	5cd3      	ldrb	r3, [r2, r3]
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800191e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	4013      	ands	r3, r2
 8001926:	d009      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800192a:	4812      	ldr	r0, [pc, #72]	; (8001974 <HAL_RCC_GetSysClockFreq+0xc4>)
 800192c:	f7fe fbf6 	bl	800011c <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	001a      	movs	r2, r3
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	4353      	muls	r3, r2
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
 800193a:	e009      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800193c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800193e:	000a      	movs	r2, r1
 8001940:	0152      	lsls	r2, r2, #5
 8001942:	1a52      	subs	r2, r2, r1
 8001944:	0193      	lsls	r3, r2, #6
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	185b      	adds	r3, r3, r1
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001954:	e002      	b.n	800195c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800195a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b00f      	add	sp, #60	; 0x3c
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	080030b8 	.word	0x080030b8
 800196c:	080030c8 	.word	0x080030c8
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200

08001978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_GetHCLKFreq+0x10>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000000 	.word	0x20000000

0800198c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001990:	f7ff fff2 	bl	8001978 <HAL_RCC_GetHCLKFreq>
 8001994:	0001      	movs	r1, r0
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	40d9      	lsrs	r1, r3
 80019a6:	000b      	movs	r3, r1
}    
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40021000 	.word	0x40021000
 80019b4:	08003104 	.word	0x08003104

080019b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e044      	b.n	8001a54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d107      	bne.n	80019e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2274      	movs	r2, #116	; 0x74
 80019d6:	2100      	movs	r1, #0
 80019d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	0018      	movs	r0, r3
 80019de:	f7fe ff49 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f000 f830 	bl	8001a60 <UART_SetConfig>
 8001a00:	0003      	movs	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e024      	b.n	8001a54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 f963 	bl	8001ce0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	490d      	ldr	r1, [pc, #52]	; (8001a5c <HAL_UART_Init+0xa4>)
 8001a26:	400a      	ands	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2108      	movs	r1, #8
 8001a36:	438a      	bics	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 f9fb 	bl	8001e48 <UART_CheckIdleState>
 8001a52:	0003      	movs	r3, r0
}
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	fffff7ff 	.word	0xfffff7ff

08001a60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a68:	231e      	movs	r3, #30
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a8d      	ldr	r2, [pc, #564]	; (8001cc4 <UART_SetConfig+0x264>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a88      	ldr	r2, [pc, #544]	; (8001cc8 <UART_SetConfig+0x268>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a7f      	ldr	r2, [pc, #508]	; (8001ccc <UART_SetConfig+0x26c>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a7b      	ldr	r2, [pc, #492]	; (8001cd0 <UART_SetConfig+0x270>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d127      	bne.n	8001b36 <UART_SetConfig+0xd6>
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <UART_SetConfig+0x274>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	2203      	movs	r2, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d00d      	beq.n	8001b0e <UART_SetConfig+0xae>
 8001af2:	d81b      	bhi.n	8001b2c <UART_SetConfig+0xcc>
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d014      	beq.n	8001b22 <UART_SetConfig+0xc2>
 8001af8:	d818      	bhi.n	8001b2c <UART_SetConfig+0xcc>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <UART_SetConfig+0xa4>
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d00a      	beq.n	8001b18 <UART_SetConfig+0xb8>
 8001b02:	e013      	b.n	8001b2c <UART_SetConfig+0xcc>
 8001b04:	231f      	movs	r3, #31
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e021      	b.n	8001b52 <UART_SetConfig+0xf2>
 8001b0e:	231f      	movs	r3, #31
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2202      	movs	r2, #2
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e01c      	b.n	8001b52 <UART_SetConfig+0xf2>
 8001b18:	231f      	movs	r3, #31
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e017      	b.n	8001b52 <UART_SetConfig+0xf2>
 8001b22:	231f      	movs	r3, #31
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	2208      	movs	r2, #8
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e012      	b.n	8001b52 <UART_SetConfig+0xf2>
 8001b2c:	231f      	movs	r3, #31
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	2210      	movs	r2, #16
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e00d      	b.n	8001b52 <UART_SetConfig+0xf2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a67      	ldr	r2, [pc, #412]	; (8001cd8 <UART_SetConfig+0x278>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d104      	bne.n	8001b4a <UART_SetConfig+0xea>
 8001b40:	231f      	movs	r3, #31
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e003      	b.n	8001b52 <UART_SetConfig+0xf2>
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2210      	movs	r2, #16
 8001b50:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69da      	ldr	r2, [r3, #28]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d15d      	bne.n	8001c1a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8001b5e:	231f      	movs	r3, #31
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d015      	beq.n	8001b94 <UART_SetConfig+0x134>
 8001b68:	dc18      	bgt.n	8001b9c <UART_SetConfig+0x13c>
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d00d      	beq.n	8001b8a <UART_SetConfig+0x12a>
 8001b6e:	dc15      	bgt.n	8001b9c <UART_SetConfig+0x13c>
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <UART_SetConfig+0x11a>
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d005      	beq.n	8001b84 <UART_SetConfig+0x124>
 8001b78:	e010      	b.n	8001b9c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b7a:	f7ff ff07 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]
        break;
 8001b82:	e012      	b.n	8001baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001b84:	4b55      	ldr	r3, [pc, #340]	; (8001cdc <UART_SetConfig+0x27c>)
 8001b86:	61bb      	str	r3, [r7, #24]
        break;
 8001b88:	e00f      	b.n	8001baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001b8a:	f7ff fe91 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	0003      	movs	r3, r0
 8001b90:	61bb      	str	r3, [r7, #24]
        break;
 8001b92:	e00a      	b.n	8001baa <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	61bb      	str	r3, [r7, #24]
        break;
 8001b9a:	e006      	b.n	8001baa <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001ba0:	231e      	movs	r3, #30
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
        break;
 8001ba8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d100      	bne.n	8001bb2 <UART_SetConfig+0x152>
 8001bb0:	e07b      	b.n	8001caa <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	005a      	lsls	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	18d2      	adds	r2, r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	f7fe faa9 	bl	800011c <__udivsi3>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	d91c      	bls.n	8001c10 <UART_SetConfig+0x1b0>
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d217      	bcs.n	8001c10 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	200e      	movs	r0, #14
 8001be6:	183b      	adds	r3, r7, r0
 8001be8:	210f      	movs	r1, #15
 8001bea:	438a      	bics	r2, r1
 8001bec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	b299      	uxth	r1, r3
 8001bfa:	183b      	adds	r3, r7, r0
 8001bfc:	183a      	adds	r2, r7, r0
 8001bfe:	8812      	ldrh	r2, [r2, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	183a      	adds	r2, r7, r0
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	e04c      	b.n	8001caa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001c10:	231e      	movs	r3, #30
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e047      	b.n	8001caa <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001c1a:	231f      	movs	r3, #31
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d015      	beq.n	8001c50 <UART_SetConfig+0x1f0>
 8001c24:	dc18      	bgt.n	8001c58 <UART_SetConfig+0x1f8>
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d00d      	beq.n	8001c46 <UART_SetConfig+0x1e6>
 8001c2a:	dc15      	bgt.n	8001c58 <UART_SetConfig+0x1f8>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <UART_SetConfig+0x1d6>
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d005      	beq.n	8001c40 <UART_SetConfig+0x1e0>
 8001c34:	e010      	b.n	8001c58 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c36:	f7ff fea9 	bl	800198c <HAL_RCC_GetPCLK1Freq>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
        break;
 8001c3e:	e012      	b.n	8001c66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <UART_SetConfig+0x27c>)
 8001c42:	61bb      	str	r3, [r7, #24]
        break;
 8001c44:	e00f      	b.n	8001c66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001c46:	f7ff fe33 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	61bb      	str	r3, [r7, #24]
        break;
 8001c4e:	e00a      	b.n	8001c66 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	61bb      	str	r3, [r7, #24]
        break;
 8001c56:	e006      	b.n	8001c66 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001c5c:	231e      	movs	r3, #30
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
        break;
 8001c64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01e      	beq.n	8001caa <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	085a      	lsrs	r2, r3, #1
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	18d2      	adds	r2, r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	f7fe fa4d 	bl	800011c <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	d909      	bls.n	8001ca2 <UART_SetConfig+0x242>
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	025b      	lsls	r3, r3, #9
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d204      	bcs.n	8001ca2 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	e003      	b.n	8001caa <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8001ca2:	231e      	movs	r3, #30
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001cb6:	231e      	movs	r3, #30
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	781b      	ldrb	r3, [r3, #0]
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b008      	add	sp, #32
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	ffff69f3 	.word	0xffff69f3
 8001cc8:	ffffcfff 	.word	0xffffcfff
 8001ccc:	fffff4ff 	.word	0xfffff4ff
 8001cd0:	40013800 	.word	0x40013800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	007a1200 	.word	0x007a1200

08001ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <UART_AdvFeatureConfig+0x144>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00b      	beq.n	8001d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a43      	ldr	r2, [pc, #268]	; (8001e28 <UART_AdvFeatureConfig+0x148>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d00b      	beq.n	8001d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4a3b      	ldr	r2, [pc, #236]	; (8001e2c <UART_AdvFeatureConfig+0x14c>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	0019      	movs	r1, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	2208      	movs	r2, #8
 8001d54:	4013      	ands	r3, r2
 8001d56:	d00b      	beq.n	8001d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4a34      	ldr	r2, [pc, #208]	; (8001e30 <UART_AdvFeatureConfig+0x150>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2210      	movs	r2, #16
 8001d76:	4013      	ands	r3, r2
 8001d78:	d00b      	beq.n	8001d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <UART_AdvFeatureConfig+0x154>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	2220      	movs	r2, #32
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d00b      	beq.n	8001db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <UART_AdvFeatureConfig+0x158>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	2240      	movs	r2, #64	; 0x40
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d01d      	beq.n	8001dfa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <UART_AdvFeatureConfig+0x15c>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	035b      	lsls	r3, r3, #13
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d10b      	bne.n	8001dfa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <UART_AdvFeatureConfig+0x160>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	4013      	ands	r3, r2
 8001e02:	d00b      	beq.n	8001e1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <UART_AdvFeatureConfig+0x164>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]
  }
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	fffdffff 	.word	0xfffdffff
 8001e28:	fffeffff 	.word	0xfffeffff
 8001e2c:	fffbffff 	.word	0xfffbffff
 8001e30:	ffff7fff 	.word	0xffff7fff
 8001e34:	ffffefff 	.word	0xffffefff
 8001e38:	ffffdfff 	.word	0xffffdfff
 8001e3c:	ffefffff 	.word	0xffefffff
 8001e40:	ff9fffff 	.word	0xff9fffff
 8001e44:	fff7ffff 	.word	0xfff7ffff

08001e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	2100      	movs	r1, #0
 8001e56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001e58:	f7fe feb6 	bl	8000bc8 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2208      	movs	r2, #8
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d10c      	bne.n	8001e88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0391      	lsls	r1, r2, #14
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <UART_CheckIdleState+0x8c>)
 8001e78:	9200      	str	r2, [sp, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f000 f82c 	bl	8001ed8 <UART_WaitOnFlagUntilTimeout>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d001      	beq.n	8001e88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e021      	b.n	8001ecc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d10c      	bne.n	8001eb0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2280      	movs	r2, #128	; 0x80
 8001e9a:	03d1      	lsls	r1, r2, #15
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <UART_CheckIdleState+0x8c>)
 8001ea0:	9200      	str	r2, [sp, #0]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f000 f818 	bl	8001ed8 <UART_WaitOnFlagUntilTimeout>
 8001ea8:	1e03      	subs	r3, r0, #0
 8001eaa:	d001      	beq.n	8001eb0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e00d      	b.n	8001ecc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2220      	movs	r2, #32
 8001eba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2274      	movs	r2, #116	; 0x74
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	0018      	movs	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	01ffffff 	.word	0x01ffffff

08001ed8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b094      	sub	sp, #80	; 0x50
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ee8:	e0a3      	b.n	8002032 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eec:	3301      	adds	r3, #1
 8001eee:	d100      	bne.n	8001ef2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8001ef0:	e09f      	b.n	8002032 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7fe fe69 	bl	8000bc8 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d13d      	bne.n	8001f84 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f08:	f3ef 8310 	mrs	r3, PRIMASK
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
 8001f12:	2301      	movs	r3, #1
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	f383 8810 	msr	PRIMASK, r3
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	494c      	ldr	r1, [pc, #304]	; (800205c <UART_WaitOnFlagUntilTimeout+0x184>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	f383 8810 	msr	PRIMASK, r3
}
 8001f38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f42:	643b      	str	r3, [r7, #64]	; 0x40
 8001f44:	2301      	movs	r3, #1
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4a:	f383 8810 	msr	PRIMASK, r3
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f66:	f383 8810 	msr	PRIMASK, r3
}
 8001f6a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2220      	movs	r2, #32
 8001f76:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2274      	movs	r2, #116	; 0x74
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e067      	b.n	8002054 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d050      	beq.n	8002032 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d146      	bne.n	8002032 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fae:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb2:	613b      	str	r3, [r7, #16]
  return(result);
 8001fb4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb8:	2301      	movs	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f383 8810 	msr	PRIMASK, r3
}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4923      	ldr	r1, [pc, #140]	; (800205c <UART_WaitOnFlagUntilTimeout+0x184>)
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f383 8810 	msr	PRIMASK, r3
}
 8001fde:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8001fe4:	61fb      	str	r3, [r7, #28]
  return(result);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fea:	2301      	movs	r3, #1
 8001fec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	f383 8810 	msr	PRIMASK, r3
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	438a      	bics	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f383 8810 	msr	PRIMASK, r3
}
 8002010:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	2120      	movs	r1, #32
 8002024:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2274      	movs	r2, #116	; 0x74
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e010      	b.n	8002054 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	4013      	ands	r3, r2
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	425a      	negs	r2, r3
 8002042:	4153      	adcs	r3, r2
 8002044:	b2db      	uxtb	r3, r3
 8002046:	001a      	movs	r2, r3
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d100      	bne.n	8002052 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002050:	e74b      	b.n	8001eea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b014      	add	sp, #80	; 0x50
 800205a:	bd80      	pop	{r7, pc}
 800205c:	fffffe5f 	.word	0xfffffe5f

08002060 <rand>:
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <rand+0x5c>)
 8002062:	b510      	push	{r4, lr}
 8002064:	681c      	ldr	r4, [r3, #0]
 8002066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002068:	2b00      	cmp	r3, #0
 800206a:	d116      	bne.n	800209a <rand+0x3a>
 800206c:	2018      	movs	r0, #24
 800206e:	f000 fa31 	bl	80024d4 <malloc>
 8002072:	1e02      	subs	r2, r0, #0
 8002074:	6320      	str	r0, [r4, #48]	; 0x30
 8002076:	d104      	bne.n	8002082 <rand+0x22>
 8002078:	2152      	movs	r1, #82	; 0x52
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <rand+0x60>)
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <rand+0x64>)
 800207e:	f000 f9c1 	bl	8002404 <__assert_func>
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <rand+0x68>)
 8002084:	2100      	movs	r1, #0
 8002086:	6003      	str	r3, [r0, #0]
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <rand+0x6c>)
 800208a:	6043      	str	r3, [r0, #4]
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <rand+0x70>)
 800208e:	6083      	str	r3, [r0, #8]
 8002090:	230b      	movs	r3, #11
 8002092:	8183      	strh	r3, [r0, #12]
 8002094:	2001      	movs	r0, #1
 8002096:	6110      	str	r0, [r2, #16]
 8002098:	6151      	str	r1, [r2, #20]
 800209a:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <rand+0x74>)
 800209e:	6920      	ldr	r0, [r4, #16]
 80020a0:	6961      	ldr	r1, [r4, #20]
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <rand+0x78>)
 80020a4:	f7fe f9b0 	bl	8000408 <__aeabi_lmul>
 80020a8:	2201      	movs	r2, #1
 80020aa:	2300      	movs	r3, #0
 80020ac:	1880      	adds	r0, r0, r2
 80020ae:	4159      	adcs	r1, r3
 80020b0:	6120      	str	r0, [r4, #16]
 80020b2:	6161      	str	r1, [r4, #20]
 80020b4:	0048      	lsls	r0, r1, #1
 80020b6:	0840      	lsrs	r0, r0, #1
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	20000064 	.word	0x20000064
 80020c0:	0800310c 	.word	0x0800310c
 80020c4:	08003123 	.word	0x08003123
 80020c8:	abcd330e 	.word	0xabcd330e
 80020cc:	e66d1234 	.word	0xe66d1234
 80020d0:	0005deec 	.word	0x0005deec
 80020d4:	4c957f2d 	.word	0x4c957f2d
 80020d8:	5851f42d 	.word	0x5851f42d

080020dc <std>:
 80020dc:	2300      	movs	r3, #0
 80020de:	b510      	push	{r4, lr}
 80020e0:	0004      	movs	r4, r0
 80020e2:	6003      	str	r3, [r0, #0]
 80020e4:	6043      	str	r3, [r0, #4]
 80020e6:	6083      	str	r3, [r0, #8]
 80020e8:	8181      	strh	r1, [r0, #12]
 80020ea:	6643      	str	r3, [r0, #100]	; 0x64
 80020ec:	81c2      	strh	r2, [r0, #14]
 80020ee:	6103      	str	r3, [r0, #16]
 80020f0:	6143      	str	r3, [r0, #20]
 80020f2:	6183      	str	r3, [r0, #24]
 80020f4:	0019      	movs	r1, r3
 80020f6:	2208      	movs	r2, #8
 80020f8:	305c      	adds	r0, #92	; 0x5c
 80020fa:	f000 f8ff 	bl	80022fc <memset>
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <std+0x50>)
 8002100:	6224      	str	r4, [r4, #32]
 8002102:	6263      	str	r3, [r4, #36]	; 0x24
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <std+0x54>)
 8002106:	62a3      	str	r3, [r4, #40]	; 0x28
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <std+0x58>)
 800210a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <std+0x5c>)
 800210e:	6323      	str	r3, [r4, #48]	; 0x30
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <std+0x60>)
 8002112:	429c      	cmp	r4, r3
 8002114:	d005      	beq.n	8002122 <std+0x46>
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <std+0x64>)
 8002118:	429c      	cmp	r4, r3
 800211a:	d002      	beq.n	8002122 <std+0x46>
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <std+0x68>)
 800211e:	429c      	cmp	r4, r3
 8002120:	d103      	bne.n	800212a <std+0x4e>
 8002122:	0020      	movs	r0, r4
 8002124:	3058      	adds	r0, #88	; 0x58
 8002126:	f000 f969 	bl	80023fc <__retarget_lock_init_recursive>
 800212a:	bd10      	pop	{r4, pc}
 800212c:	08002265 	.word	0x08002265
 8002130:	0800228d 	.word	0x0800228d
 8002134:	080022c5 	.word	0x080022c5
 8002138:	080022f1 	.word	0x080022f1
 800213c:	20000110 	.word	0x20000110
 8002140:	20000178 	.word	0x20000178
 8002144:	200001e0 	.word	0x200001e0

08002148 <stdio_exit_handler>:
 8002148:	b510      	push	{r4, lr}
 800214a:	4a03      	ldr	r2, [pc, #12]	; (8002158 <stdio_exit_handler+0x10>)
 800214c:	4903      	ldr	r1, [pc, #12]	; (800215c <stdio_exit_handler+0x14>)
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <stdio_exit_handler+0x18>)
 8002150:	f000 f86c 	bl	800222c <_fwalk_sglue>
 8002154:	bd10      	pop	{r4, pc}
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	2000000c 	.word	0x2000000c
 800215c:	08002765 	.word	0x08002765
 8002160:	20000018 	.word	0x20000018

08002164 <cleanup_stdio>:
 8002164:	6841      	ldr	r1, [r0, #4]
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <cleanup_stdio+0x30>)
 8002168:	b510      	push	{r4, lr}
 800216a:	0004      	movs	r4, r0
 800216c:	4299      	cmp	r1, r3
 800216e:	d001      	beq.n	8002174 <cleanup_stdio+0x10>
 8002170:	f000 faf8 	bl	8002764 <_fflush_r>
 8002174:	68a1      	ldr	r1, [r4, #8]
 8002176:	4b08      	ldr	r3, [pc, #32]	; (8002198 <cleanup_stdio+0x34>)
 8002178:	4299      	cmp	r1, r3
 800217a:	d002      	beq.n	8002182 <cleanup_stdio+0x1e>
 800217c:	0020      	movs	r0, r4
 800217e:	f000 faf1 	bl	8002764 <_fflush_r>
 8002182:	68e1      	ldr	r1, [r4, #12]
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <cleanup_stdio+0x38>)
 8002186:	4299      	cmp	r1, r3
 8002188:	d002      	beq.n	8002190 <cleanup_stdio+0x2c>
 800218a:	0020      	movs	r0, r4
 800218c:	f000 faea 	bl	8002764 <_fflush_r>
 8002190:	bd10      	pop	{r4, pc}
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	20000110 	.word	0x20000110
 8002198:	20000178 	.word	0x20000178
 800219c:	200001e0 	.word	0x200001e0

080021a0 <global_stdio_init.part.0>:
 80021a0:	b510      	push	{r4, lr}
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <global_stdio_init.part.0+0x28>)
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <global_stdio_init.part.0+0x2c>)
 80021a6:	2104      	movs	r1, #4
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <global_stdio_init.part.0+0x30>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	f7ff ff95 	bl	80020dc <std>
 80021b2:	2201      	movs	r2, #1
 80021b4:	2109      	movs	r1, #9
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <global_stdio_init.part.0+0x34>)
 80021b8:	f7ff ff90 	bl	80020dc <std>
 80021bc:	2202      	movs	r2, #2
 80021be:	2112      	movs	r1, #18
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <global_stdio_init.part.0+0x38>)
 80021c2:	f7ff ff8b 	bl	80020dc <std>
 80021c6:	bd10      	pop	{r4, pc}
 80021c8:	20000248 	.word	0x20000248
 80021cc:	08002149 	.word	0x08002149
 80021d0:	20000110 	.word	0x20000110
 80021d4:	20000178 	.word	0x20000178
 80021d8:	200001e0 	.word	0x200001e0

080021dc <__sfp_lock_acquire>:
 80021dc:	b510      	push	{r4, lr}
 80021de:	4802      	ldr	r0, [pc, #8]	; (80021e8 <__sfp_lock_acquire+0xc>)
 80021e0:	f000 f90d 	bl	80023fe <__retarget_lock_acquire_recursive>
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	20000251 	.word	0x20000251

080021ec <__sfp_lock_release>:
 80021ec:	b510      	push	{r4, lr}
 80021ee:	4802      	ldr	r0, [pc, #8]	; (80021f8 <__sfp_lock_release+0xc>)
 80021f0:	f000 f906 	bl	8002400 <__retarget_lock_release_recursive>
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	20000251 	.word	0x20000251

080021fc <__sinit>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	0004      	movs	r4, r0
 8002200:	f7ff ffec 	bl	80021dc <__sfp_lock_acquire>
 8002204:	6a23      	ldr	r3, [r4, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <__sinit+0x14>
 800220a:	f7ff ffef 	bl	80021ec <__sfp_lock_release>
 800220e:	bd10      	pop	{r4, pc}
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__sinit+0x28>)
 8002212:	6223      	str	r3, [r4, #32]
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__sinit+0x2c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f6      	bne.n	800220a <__sinit+0xe>
 800221c:	f7ff ffc0 	bl	80021a0 <global_stdio_init.part.0>
 8002220:	e7f3      	b.n	800220a <__sinit+0xe>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	08002165 	.word	0x08002165
 8002228:	20000248 	.word	0x20000248

0800222c <_fwalk_sglue>:
 800222c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800222e:	0014      	movs	r4, r2
 8002230:	2600      	movs	r6, #0
 8002232:	9000      	str	r0, [sp, #0]
 8002234:	9101      	str	r1, [sp, #4]
 8002236:	68a5      	ldr	r5, [r4, #8]
 8002238:	6867      	ldr	r7, [r4, #4]
 800223a:	3f01      	subs	r7, #1
 800223c:	d504      	bpl.n	8002248 <_fwalk_sglue+0x1c>
 800223e:	6824      	ldr	r4, [r4, #0]
 8002240:	2c00      	cmp	r4, #0
 8002242:	d1f8      	bne.n	8002236 <_fwalk_sglue+0xa>
 8002244:	0030      	movs	r0, r6
 8002246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002248:	89ab      	ldrh	r3, [r5, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d908      	bls.n	8002260 <_fwalk_sglue+0x34>
 800224e:	220e      	movs	r2, #14
 8002250:	5eab      	ldrsh	r3, [r5, r2]
 8002252:	3301      	adds	r3, #1
 8002254:	d004      	beq.n	8002260 <_fwalk_sglue+0x34>
 8002256:	0029      	movs	r1, r5
 8002258:	9800      	ldr	r0, [sp, #0]
 800225a:	9b01      	ldr	r3, [sp, #4]
 800225c:	4798      	blx	r3
 800225e:	4306      	orrs	r6, r0
 8002260:	3568      	adds	r5, #104	; 0x68
 8002262:	e7ea      	b.n	800223a <_fwalk_sglue+0xe>

08002264 <__sread>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	000c      	movs	r4, r1
 8002268:	250e      	movs	r5, #14
 800226a:	5f49      	ldrsh	r1, [r1, r5]
 800226c:	f000 f874 	bl	8002358 <_read_r>
 8002270:	2800      	cmp	r0, #0
 8002272:	db03      	blt.n	800227c <__sread+0x18>
 8002274:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002276:	181b      	adds	r3, r3, r0
 8002278:	6563      	str	r3, [r4, #84]	; 0x54
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	89a3      	ldrh	r3, [r4, #12]
 800227e:	4a02      	ldr	r2, [pc, #8]	; (8002288 <__sread+0x24>)
 8002280:	4013      	ands	r3, r2
 8002282:	81a3      	strh	r3, [r4, #12]
 8002284:	e7f9      	b.n	800227a <__sread+0x16>
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	ffffefff 	.word	0xffffefff

0800228c <__swrite>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	001f      	movs	r7, r3
 8002290:	898b      	ldrh	r3, [r1, #12]
 8002292:	0005      	movs	r5, r0
 8002294:	000c      	movs	r4, r1
 8002296:	0016      	movs	r6, r2
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	d505      	bpl.n	80022a8 <__swrite+0x1c>
 800229c:	230e      	movs	r3, #14
 800229e:	5ec9      	ldrsh	r1, [r1, r3]
 80022a0:	2200      	movs	r2, #0
 80022a2:	2302      	movs	r3, #2
 80022a4:	f000 f844 	bl	8002330 <_lseek_r>
 80022a8:	89a3      	ldrh	r3, [r4, #12]
 80022aa:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <__swrite+0x34>)
 80022ac:	0028      	movs	r0, r5
 80022ae:	4013      	ands	r3, r2
 80022b0:	81a3      	strh	r3, [r4, #12]
 80022b2:	0032      	movs	r2, r6
 80022b4:	230e      	movs	r3, #14
 80022b6:	5ee1      	ldrsh	r1, [r4, r3]
 80022b8:	003b      	movs	r3, r7
 80022ba:	f000 f861 	bl	8002380 <_write_r>
 80022be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c0:	ffffefff 	.word	0xffffefff

080022c4 <__sseek>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	000c      	movs	r4, r1
 80022c8:	250e      	movs	r5, #14
 80022ca:	5f49      	ldrsh	r1, [r1, r5]
 80022cc:	f000 f830 	bl	8002330 <_lseek_r>
 80022d0:	89a3      	ldrh	r3, [r4, #12]
 80022d2:	1c42      	adds	r2, r0, #1
 80022d4:	d103      	bne.n	80022de <__sseek+0x1a>
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <__sseek+0x28>)
 80022d8:	4013      	ands	r3, r2
 80022da:	81a3      	strh	r3, [r4, #12]
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	0152      	lsls	r2, r2, #5
 80022e2:	4313      	orrs	r3, r2
 80022e4:	81a3      	strh	r3, [r4, #12]
 80022e6:	6560      	str	r0, [r4, #84]	; 0x54
 80022e8:	e7f8      	b.n	80022dc <__sseek+0x18>
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	ffffefff 	.word	0xffffefff

080022f0 <__sclose>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	230e      	movs	r3, #14
 80022f4:	5ec9      	ldrsh	r1, [r1, r3]
 80022f6:	f000 f809 	bl	800230c <_close_r>
 80022fa:	bd10      	pop	{r4, pc}

080022fc <memset>:
 80022fc:	0003      	movs	r3, r0
 80022fe:	1882      	adds	r2, r0, r2
 8002300:	4293      	cmp	r3, r2
 8002302:	d100      	bne.n	8002306 <memset+0xa>
 8002304:	4770      	bx	lr
 8002306:	7019      	strb	r1, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	e7f9      	b.n	8002300 <memset+0x4>

0800230c <_close_r>:
 800230c:	2300      	movs	r3, #0
 800230e:	b570      	push	{r4, r5, r6, lr}
 8002310:	4d06      	ldr	r5, [pc, #24]	; (800232c <_close_r+0x20>)
 8002312:	0004      	movs	r4, r0
 8002314:	0008      	movs	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f7fe fb6a 	bl	80009f0 <_close>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d103      	bne.n	8002328 <_close_r+0x1c>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d000      	beq.n	8002328 <_close_r+0x1c>
 8002326:	6023      	str	r3, [r4, #0]
 8002328:	bd70      	pop	{r4, r5, r6, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	2000024c 	.word	0x2000024c

08002330 <_lseek_r>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	0004      	movs	r4, r0
 8002334:	0008      	movs	r0, r1
 8002336:	0011      	movs	r1, r2
 8002338:	001a      	movs	r2, r3
 800233a:	2300      	movs	r3, #0
 800233c:	4d05      	ldr	r5, [pc, #20]	; (8002354 <_lseek_r+0x24>)
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	f7fe fb77 	bl	8000a32 <_lseek>
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	d103      	bne.n	8002350 <_lseek_r+0x20>
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d000      	beq.n	8002350 <_lseek_r+0x20>
 800234e:	6023      	str	r3, [r4, #0]
 8002350:	bd70      	pop	{r4, r5, r6, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	2000024c 	.word	0x2000024c

08002358 <_read_r>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	0004      	movs	r4, r0
 800235c:	0008      	movs	r0, r1
 800235e:	0011      	movs	r1, r2
 8002360:	001a      	movs	r2, r3
 8002362:	2300      	movs	r3, #0
 8002364:	4d05      	ldr	r5, [pc, #20]	; (800237c <_read_r+0x24>)
 8002366:	602b      	str	r3, [r5, #0]
 8002368:	f7fe fb09 	bl	800097e <_read>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d103      	bne.n	8002378 <_read_r+0x20>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d000      	beq.n	8002378 <_read_r+0x20>
 8002376:	6023      	str	r3, [r4, #0]
 8002378:	bd70      	pop	{r4, r5, r6, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	2000024c 	.word	0x2000024c

08002380 <_write_r>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	0004      	movs	r4, r0
 8002384:	0008      	movs	r0, r1
 8002386:	0011      	movs	r1, r2
 8002388:	001a      	movs	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	4d05      	ldr	r5, [pc, #20]	; (80023a4 <_write_r+0x24>)
 800238e:	602b      	str	r3, [r5, #0]
 8002390:	f7fe fb12 	bl	80009b8 <_write>
 8002394:	1c43      	adds	r3, r0, #1
 8002396:	d103      	bne.n	80023a0 <_write_r+0x20>
 8002398:	682b      	ldr	r3, [r5, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d000      	beq.n	80023a0 <_write_r+0x20>
 800239e:	6023      	str	r3, [r4, #0]
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	2000024c 	.word	0x2000024c

080023a8 <__errno>:
 80023a8:	4b01      	ldr	r3, [pc, #4]	; (80023b0 <__errno+0x8>)
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	4770      	bx	lr
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000064 	.word	0x20000064

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	2600      	movs	r6, #0
 80023b8:	4c0c      	ldr	r4, [pc, #48]	; (80023ec <__libc_init_array+0x38>)
 80023ba:	4d0d      	ldr	r5, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	2600      	movs	r6, #0
 80023c6:	f000 fe6b 	bl	80030a0 <_init>
 80023ca:	4c0a      	ldr	r4, [pc, #40]	; (80023f4 <__libc_init_array+0x40>)
 80023cc:	4d0a      	ldr	r5, [pc, #40]	; (80023f8 <__libc_init_array+0x44>)
 80023ce:	1b64      	subs	r4, r4, r5
 80023d0:	10a4      	asrs	r4, r4, #2
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	00b3      	lsls	r3, r6, #2
 80023da:	58eb      	ldr	r3, [r5, r3]
 80023dc:	4798      	blx	r3
 80023de:	3601      	adds	r6, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	00b3      	lsls	r3, r6, #2
 80023e4:	58eb      	ldr	r3, [r5, r3]
 80023e6:	4798      	blx	r3
 80023e8:	3601      	adds	r6, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	080031ec 	.word	0x080031ec
 80023f0:	080031ec 	.word	0x080031ec
 80023f4:	080031f0 	.word	0x080031f0
 80023f8:	080031ec 	.word	0x080031ec

080023fc <__retarget_lock_init_recursive>:
 80023fc:	4770      	bx	lr

080023fe <__retarget_lock_acquire_recursive>:
 80023fe:	4770      	bx	lr

08002400 <__retarget_lock_release_recursive>:
 8002400:	4770      	bx	lr
	...

08002404 <__assert_func>:
 8002404:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002406:	0014      	movs	r4, r2
 8002408:	001a      	movs	r2, r3
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <__assert_func+0x2c>)
 800240c:	0005      	movs	r5, r0
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	000e      	movs	r6, r1
 8002412:	68d8      	ldr	r0, [r3, #12]
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <__assert_func+0x30>)
 8002416:	2c00      	cmp	r4, #0
 8002418:	d101      	bne.n	800241e <__assert_func+0x1a>
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <__assert_func+0x34>)
 800241c:	001c      	movs	r4, r3
 800241e:	4907      	ldr	r1, [pc, #28]	; (800243c <__assert_func+0x38>)
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	9402      	str	r4, [sp, #8]
 8002424:	002b      	movs	r3, r5
 8002426:	9600      	str	r6, [sp, #0]
 8002428:	f000 f9c8 	bl	80027bc <fiprintf>
 800242c:	f000 f9e8 	bl	8002800 <abort>
 8002430:	20000064 	.word	0x20000064
 8002434:	0800317b 	.word	0x0800317b
 8002438:	080031b6 	.word	0x080031b6
 800243c:	08003188 	.word	0x08003188

08002440 <_free_r>:
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	0005      	movs	r5, r0
 8002444:	2900      	cmp	r1, #0
 8002446:	d010      	beq.n	800246a <_free_r+0x2a>
 8002448:	1f0c      	subs	r4, r1, #4
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da00      	bge.n	8002452 <_free_r+0x12>
 8002450:	18e4      	adds	r4, r4, r3
 8002452:	0028      	movs	r0, r5
 8002454:	f000 f8ec 	bl	8002630 <__malloc_lock>
 8002458:	4a1d      	ldr	r2, [pc, #116]	; (80024d0 <_free_r+0x90>)
 800245a:	6813      	ldr	r3, [r2, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <_free_r+0x2c>
 8002460:	6063      	str	r3, [r4, #4]
 8002462:	6014      	str	r4, [r2, #0]
 8002464:	0028      	movs	r0, r5
 8002466:	f000 f8eb 	bl	8002640 <__malloc_unlock>
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	42a3      	cmp	r3, r4
 800246e:	d908      	bls.n	8002482 <_free_r+0x42>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	1821      	adds	r1, r4, r0
 8002474:	428b      	cmp	r3, r1
 8002476:	d1f3      	bne.n	8002460 <_free_r+0x20>
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	1809      	adds	r1, r1, r0
 800247e:	6021      	str	r1, [r4, #0]
 8002480:	e7ee      	b.n	8002460 <_free_r+0x20>
 8002482:	001a      	movs	r2, r3
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <_free_r+0x4e>
 800248a:	42a3      	cmp	r3, r4
 800248c:	d9f9      	bls.n	8002482 <_free_r+0x42>
 800248e:	6811      	ldr	r1, [r2, #0]
 8002490:	1850      	adds	r0, r2, r1
 8002492:	42a0      	cmp	r0, r4
 8002494:	d10b      	bne.n	80024ae <_free_r+0x6e>
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	1809      	adds	r1, r1, r0
 800249a:	1850      	adds	r0, r2, r1
 800249c:	6011      	str	r1, [r2, #0]
 800249e:	4283      	cmp	r3, r0
 80024a0:	d1e0      	bne.n	8002464 <_free_r+0x24>
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	1841      	adds	r1, r0, r1
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	e7da      	b.n	8002464 <_free_r+0x24>
 80024ae:	42a0      	cmp	r0, r4
 80024b0:	d902      	bls.n	80024b8 <_free_r+0x78>
 80024b2:	230c      	movs	r3, #12
 80024b4:	602b      	str	r3, [r5, #0]
 80024b6:	e7d5      	b.n	8002464 <_free_r+0x24>
 80024b8:	6820      	ldr	r0, [r4, #0]
 80024ba:	1821      	adds	r1, r4, r0
 80024bc:	428b      	cmp	r3, r1
 80024be:	d103      	bne.n	80024c8 <_free_r+0x88>
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	1809      	adds	r1, r1, r0
 80024c6:	6021      	str	r1, [r4, #0]
 80024c8:	6063      	str	r3, [r4, #4]
 80024ca:	6054      	str	r4, [r2, #4]
 80024cc:	e7ca      	b.n	8002464 <_free_r+0x24>
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	20000254 	.word	0x20000254

080024d4 <malloc>:
 80024d4:	b510      	push	{r4, lr}
 80024d6:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <malloc+0x10>)
 80024d8:	0001      	movs	r1, r0
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	f000 f826 	bl	800252c <_malloc_r>
 80024e0:	bd10      	pop	{r4, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	20000064 	.word	0x20000064

080024e8 <sbrk_aligned>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	4e0f      	ldr	r6, [pc, #60]	; (8002528 <sbrk_aligned+0x40>)
 80024ec:	000d      	movs	r5, r1
 80024ee:	6831      	ldr	r1, [r6, #0]
 80024f0:	0004      	movs	r4, r0
 80024f2:	2900      	cmp	r1, #0
 80024f4:	d102      	bne.n	80024fc <sbrk_aligned+0x14>
 80024f6:	f000 f971 	bl	80027dc <_sbrk_r>
 80024fa:	6030      	str	r0, [r6, #0]
 80024fc:	0029      	movs	r1, r5
 80024fe:	0020      	movs	r0, r4
 8002500:	f000 f96c 	bl	80027dc <_sbrk_r>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d00a      	beq.n	800251e <sbrk_aligned+0x36>
 8002508:	2303      	movs	r3, #3
 800250a:	1cc5      	adds	r5, r0, #3
 800250c:	439d      	bics	r5, r3
 800250e:	42a8      	cmp	r0, r5
 8002510:	d007      	beq.n	8002522 <sbrk_aligned+0x3a>
 8002512:	1a29      	subs	r1, r5, r0
 8002514:	0020      	movs	r0, r4
 8002516:	f000 f961 	bl	80027dc <_sbrk_r>
 800251a:	3001      	adds	r0, #1
 800251c:	d101      	bne.n	8002522 <sbrk_aligned+0x3a>
 800251e:	2501      	movs	r5, #1
 8002520:	426d      	negs	r5, r5
 8002522:	0028      	movs	r0, r5
 8002524:	bd70      	pop	{r4, r5, r6, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	20000258 	.word	0x20000258

0800252c <_malloc_r>:
 800252c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800252e:	2203      	movs	r2, #3
 8002530:	1ccb      	adds	r3, r1, #3
 8002532:	4393      	bics	r3, r2
 8002534:	3308      	adds	r3, #8
 8002536:	0006      	movs	r6, r0
 8002538:	001f      	movs	r7, r3
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d238      	bcs.n	80025b0 <_malloc_r+0x84>
 800253e:	270c      	movs	r7, #12
 8002540:	42b9      	cmp	r1, r7
 8002542:	d837      	bhi.n	80025b4 <_malloc_r+0x88>
 8002544:	0030      	movs	r0, r6
 8002546:	f000 f873 	bl	8002630 <__malloc_lock>
 800254a:	4b38      	ldr	r3, [pc, #224]	; (800262c <_malloc_r+0x100>)
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	001c      	movs	r4, r3
 8002552:	2c00      	cmp	r4, #0
 8002554:	d133      	bne.n	80025be <_malloc_r+0x92>
 8002556:	0039      	movs	r1, r7
 8002558:	0030      	movs	r0, r6
 800255a:	f7ff ffc5 	bl	80024e8 <sbrk_aligned>
 800255e:	0004      	movs	r4, r0
 8002560:	1c43      	adds	r3, r0, #1
 8002562:	d15e      	bne.n	8002622 <_malloc_r+0xf6>
 8002564:	9b00      	ldr	r3, [sp, #0]
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	0025      	movs	r5, r4
 800256a:	2d00      	cmp	r5, #0
 800256c:	d14e      	bne.n	800260c <_malloc_r+0xe0>
 800256e:	2c00      	cmp	r4, #0
 8002570:	d051      	beq.n	8002616 <_malloc_r+0xea>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	0029      	movs	r1, r5
 8002576:	18e3      	adds	r3, r4, r3
 8002578:	0030      	movs	r0, r6
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	f000 f92e 	bl	80027dc <_sbrk_r>
 8002580:	9b01      	ldr	r3, [sp, #4]
 8002582:	4283      	cmp	r3, r0
 8002584:	d147      	bne.n	8002616 <_malloc_r+0xea>
 8002586:	6823      	ldr	r3, [r4, #0]
 8002588:	0030      	movs	r0, r6
 800258a:	1aff      	subs	r7, r7, r3
 800258c:	0039      	movs	r1, r7
 800258e:	f7ff ffab 	bl	80024e8 <sbrk_aligned>
 8002592:	3001      	adds	r0, #1
 8002594:	d03f      	beq.n	8002616 <_malloc_r+0xea>
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	19db      	adds	r3, r3, r7
 800259a:	6023      	str	r3, [r4, #0]
 800259c:	9b00      	ldr	r3, [sp, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d040      	beq.n	8002626 <_malloc_r+0xfa>
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	42a2      	cmp	r2, r4
 80025a8:	d133      	bne.n	8002612 <_malloc_r+0xe6>
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e014      	b.n	80025da <_malloc_r+0xae>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	dac5      	bge.n	8002540 <_malloc_r+0x14>
 80025b4:	230c      	movs	r3, #12
 80025b6:	2500      	movs	r5, #0
 80025b8:	6033      	str	r3, [r6, #0]
 80025ba:	0028      	movs	r0, r5
 80025bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025be:	6821      	ldr	r1, [r4, #0]
 80025c0:	1bc9      	subs	r1, r1, r7
 80025c2:	d420      	bmi.n	8002606 <_malloc_r+0xda>
 80025c4:	290b      	cmp	r1, #11
 80025c6:	d918      	bls.n	80025fa <_malloc_r+0xce>
 80025c8:	19e2      	adds	r2, r4, r7
 80025ca:	6027      	str	r7, [r4, #0]
 80025cc:	42a3      	cmp	r3, r4
 80025ce:	d112      	bne.n	80025f6 <_malloc_r+0xca>
 80025d0:	9b00      	ldr	r3, [sp, #0]
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	6863      	ldr	r3, [r4, #4]
 80025d6:	6011      	str	r1, [r2, #0]
 80025d8:	6053      	str	r3, [r2, #4]
 80025da:	0030      	movs	r0, r6
 80025dc:	0025      	movs	r5, r4
 80025de:	f000 f82f 	bl	8002640 <__malloc_unlock>
 80025e2:	2207      	movs	r2, #7
 80025e4:	350b      	adds	r5, #11
 80025e6:	1d23      	adds	r3, r4, #4
 80025e8:	4395      	bics	r5, r2
 80025ea:	1aea      	subs	r2, r5, r3
 80025ec:	429d      	cmp	r5, r3
 80025ee:	d0e4      	beq.n	80025ba <_malloc_r+0x8e>
 80025f0:	1b5b      	subs	r3, r3, r5
 80025f2:	50a3      	str	r3, [r4, r2]
 80025f4:	e7e1      	b.n	80025ba <_malloc_r+0x8e>
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	e7ec      	b.n	80025d4 <_malloc_r+0xa8>
 80025fa:	6862      	ldr	r2, [r4, #4]
 80025fc:	42a3      	cmp	r3, r4
 80025fe:	d1d5      	bne.n	80025ac <_malloc_r+0x80>
 8002600:	9b00      	ldr	r3, [sp, #0]
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e7e9      	b.n	80025da <_malloc_r+0xae>
 8002606:	0023      	movs	r3, r4
 8002608:	6864      	ldr	r4, [r4, #4]
 800260a:	e7a2      	b.n	8002552 <_malloc_r+0x26>
 800260c:	002c      	movs	r4, r5
 800260e:	686d      	ldr	r5, [r5, #4]
 8002610:	e7ab      	b.n	800256a <_malloc_r+0x3e>
 8002612:	0013      	movs	r3, r2
 8002614:	e7c4      	b.n	80025a0 <_malloc_r+0x74>
 8002616:	230c      	movs	r3, #12
 8002618:	0030      	movs	r0, r6
 800261a:	6033      	str	r3, [r6, #0]
 800261c:	f000 f810 	bl	8002640 <__malloc_unlock>
 8002620:	e7cb      	b.n	80025ba <_malloc_r+0x8e>
 8002622:	6027      	str	r7, [r4, #0]
 8002624:	e7d9      	b.n	80025da <_malloc_r+0xae>
 8002626:	605b      	str	r3, [r3, #4]
 8002628:	deff      	udf	#255	; 0xff
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	20000254 	.word	0x20000254

08002630 <__malloc_lock>:
 8002630:	b510      	push	{r4, lr}
 8002632:	4802      	ldr	r0, [pc, #8]	; (800263c <__malloc_lock+0xc>)
 8002634:	f7ff fee3 	bl	80023fe <__retarget_lock_acquire_recursive>
 8002638:	bd10      	pop	{r4, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	20000250 	.word	0x20000250

08002640 <__malloc_unlock>:
 8002640:	b510      	push	{r4, lr}
 8002642:	4802      	ldr	r0, [pc, #8]	; (800264c <__malloc_unlock+0xc>)
 8002644:	f7ff fedc 	bl	8002400 <__retarget_lock_release_recursive>
 8002648:	bd10      	pop	{r4, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20000250 	.word	0x20000250

08002650 <__sflush_r>:
 8002650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002652:	898b      	ldrh	r3, [r1, #12]
 8002654:	0005      	movs	r5, r0
 8002656:	000c      	movs	r4, r1
 8002658:	071a      	lsls	r2, r3, #28
 800265a:	d45c      	bmi.n	8002716 <__sflush_r+0xc6>
 800265c:	684a      	ldr	r2, [r1, #4]
 800265e:	2a00      	cmp	r2, #0
 8002660:	dc04      	bgt.n	800266c <__sflush_r+0x1c>
 8002662:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002664:	2a00      	cmp	r2, #0
 8002666:	dc01      	bgt.n	800266c <__sflush_r+0x1c>
 8002668:	2000      	movs	r0, #0
 800266a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800266c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800266e:	2f00      	cmp	r7, #0
 8002670:	d0fa      	beq.n	8002668 <__sflush_r+0x18>
 8002672:	2200      	movs	r2, #0
 8002674:	2080      	movs	r0, #128	; 0x80
 8002676:	682e      	ldr	r6, [r5, #0]
 8002678:	602a      	str	r2, [r5, #0]
 800267a:	001a      	movs	r2, r3
 800267c:	0140      	lsls	r0, r0, #5
 800267e:	6a21      	ldr	r1, [r4, #32]
 8002680:	4002      	ands	r2, r0
 8002682:	4203      	tst	r3, r0
 8002684:	d034      	beq.n	80026f0 <__sflush_r+0xa0>
 8002686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	075b      	lsls	r3, r3, #29
 800268c:	d506      	bpl.n	800269c <__sflush_r+0x4c>
 800268e:	6863      	ldr	r3, [r4, #4]
 8002690:	1ac0      	subs	r0, r0, r3
 8002692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <__sflush_r+0x4c>
 8002698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800269a:	1ac0      	subs	r0, r0, r3
 800269c:	0002      	movs	r2, r0
 800269e:	2300      	movs	r3, #0
 80026a0:	0028      	movs	r0, r5
 80026a2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026a4:	6a21      	ldr	r1, [r4, #32]
 80026a6:	47b8      	blx	r7
 80026a8:	89a2      	ldrh	r2, [r4, #12]
 80026aa:	1c43      	adds	r3, r0, #1
 80026ac:	d106      	bne.n	80026bc <__sflush_r+0x6c>
 80026ae:	6829      	ldr	r1, [r5, #0]
 80026b0:	291d      	cmp	r1, #29
 80026b2:	d82c      	bhi.n	800270e <__sflush_r+0xbe>
 80026b4:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <__sflush_r+0x110>)
 80026b6:	410b      	asrs	r3, r1
 80026b8:	07db      	lsls	r3, r3, #31
 80026ba:	d428      	bmi.n	800270e <__sflush_r+0xbe>
 80026bc:	2300      	movs	r3, #0
 80026be:	6063      	str	r3, [r4, #4]
 80026c0:	6923      	ldr	r3, [r4, #16]
 80026c2:	6023      	str	r3, [r4, #0]
 80026c4:	04d2      	lsls	r2, r2, #19
 80026c6:	d505      	bpl.n	80026d4 <__sflush_r+0x84>
 80026c8:	1c43      	adds	r3, r0, #1
 80026ca:	d102      	bne.n	80026d2 <__sflush_r+0x82>
 80026cc:	682b      	ldr	r3, [r5, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d100      	bne.n	80026d4 <__sflush_r+0x84>
 80026d2:	6560      	str	r0, [r4, #84]	; 0x54
 80026d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026d6:	602e      	str	r6, [r5, #0]
 80026d8:	2900      	cmp	r1, #0
 80026da:	d0c5      	beq.n	8002668 <__sflush_r+0x18>
 80026dc:	0023      	movs	r3, r4
 80026de:	3344      	adds	r3, #68	; 0x44
 80026e0:	4299      	cmp	r1, r3
 80026e2:	d002      	beq.n	80026ea <__sflush_r+0x9a>
 80026e4:	0028      	movs	r0, r5
 80026e6:	f7ff feab 	bl	8002440 <_free_r>
 80026ea:	2000      	movs	r0, #0
 80026ec:	6360      	str	r0, [r4, #52]	; 0x34
 80026ee:	e7bc      	b.n	800266a <__sflush_r+0x1a>
 80026f0:	2301      	movs	r3, #1
 80026f2:	0028      	movs	r0, r5
 80026f4:	47b8      	blx	r7
 80026f6:	1c43      	adds	r3, r0, #1
 80026f8:	d1c6      	bne.n	8002688 <__sflush_r+0x38>
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0c3      	beq.n	8002688 <__sflush_r+0x38>
 8002700:	2b1d      	cmp	r3, #29
 8002702:	d001      	beq.n	8002708 <__sflush_r+0xb8>
 8002704:	2b16      	cmp	r3, #22
 8002706:	d101      	bne.n	800270c <__sflush_r+0xbc>
 8002708:	602e      	str	r6, [r5, #0]
 800270a:	e7ad      	b.n	8002668 <__sflush_r+0x18>
 800270c:	89a2      	ldrh	r2, [r4, #12]
 800270e:	2340      	movs	r3, #64	; 0x40
 8002710:	4313      	orrs	r3, r2
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	e7a9      	b.n	800266a <__sflush_r+0x1a>
 8002716:	690e      	ldr	r6, [r1, #16]
 8002718:	2e00      	cmp	r6, #0
 800271a:	d0a5      	beq.n	8002668 <__sflush_r+0x18>
 800271c:	680f      	ldr	r7, [r1, #0]
 800271e:	600e      	str	r6, [r1, #0]
 8002720:	1bba      	subs	r2, r7, r6
 8002722:	9201      	str	r2, [sp, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	079b      	lsls	r3, r3, #30
 8002728:	d100      	bne.n	800272c <__sflush_r+0xdc>
 800272a:	694a      	ldr	r2, [r1, #20]
 800272c:	60a2      	str	r2, [r4, #8]
 800272e:	9b01      	ldr	r3, [sp, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	dd99      	ble.n	8002668 <__sflush_r+0x18>
 8002734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002736:	0032      	movs	r2, r6
 8002738:	001f      	movs	r7, r3
 800273a:	0028      	movs	r0, r5
 800273c:	9b01      	ldr	r3, [sp, #4]
 800273e:	6a21      	ldr	r1, [r4, #32]
 8002740:	47b8      	blx	r7
 8002742:	2800      	cmp	r0, #0
 8002744:	dc06      	bgt.n	8002754 <__sflush_r+0x104>
 8002746:	2340      	movs	r3, #64	; 0x40
 8002748:	2001      	movs	r0, #1
 800274a:	89a2      	ldrh	r2, [r4, #12]
 800274c:	4240      	negs	r0, r0
 800274e:	4313      	orrs	r3, r2
 8002750:	81a3      	strh	r3, [r4, #12]
 8002752:	e78a      	b.n	800266a <__sflush_r+0x1a>
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	1836      	adds	r6, r6, r0
 8002758:	1a1b      	subs	r3, r3, r0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	e7e7      	b.n	800272e <__sflush_r+0xde>
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	dfbffffe 	.word	0xdfbffffe

08002764 <_fflush_r>:
 8002764:	690b      	ldr	r3, [r1, #16]
 8002766:	b570      	push	{r4, r5, r6, lr}
 8002768:	0005      	movs	r5, r0
 800276a:	000c      	movs	r4, r1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <_fflush_r+0x12>
 8002770:	2500      	movs	r5, #0
 8002772:	0028      	movs	r0, r5
 8002774:	bd70      	pop	{r4, r5, r6, pc}
 8002776:	2800      	cmp	r0, #0
 8002778:	d004      	beq.n	8002784 <_fflush_r+0x20>
 800277a:	6a03      	ldr	r3, [r0, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <_fflush_r+0x20>
 8002780:	f7ff fd3c 	bl	80021fc <__sinit>
 8002784:	220c      	movs	r2, #12
 8002786:	5ea3      	ldrsh	r3, [r4, r2]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f1      	beq.n	8002770 <_fflush_r+0xc>
 800278c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800278e:	07d2      	lsls	r2, r2, #31
 8002790:	d404      	bmi.n	800279c <_fflush_r+0x38>
 8002792:	059b      	lsls	r3, r3, #22
 8002794:	d402      	bmi.n	800279c <_fflush_r+0x38>
 8002796:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002798:	f7ff fe31 	bl	80023fe <__retarget_lock_acquire_recursive>
 800279c:	0028      	movs	r0, r5
 800279e:	0021      	movs	r1, r4
 80027a0:	f7ff ff56 	bl	8002650 <__sflush_r>
 80027a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027a6:	0005      	movs	r5, r0
 80027a8:	07db      	lsls	r3, r3, #31
 80027aa:	d4e2      	bmi.n	8002772 <_fflush_r+0xe>
 80027ac:	89a3      	ldrh	r3, [r4, #12]
 80027ae:	059b      	lsls	r3, r3, #22
 80027b0:	d4df      	bmi.n	8002772 <_fflush_r+0xe>
 80027b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027b4:	f7ff fe24 	bl	8002400 <__retarget_lock_release_recursive>
 80027b8:	e7db      	b.n	8002772 <_fflush_r+0xe>
	...

080027bc <fiprintf>:
 80027bc:	b40e      	push	{r1, r2, r3}
 80027be:	b517      	push	{r0, r1, r2, r4, lr}
 80027c0:	4c05      	ldr	r4, [pc, #20]	; (80027d8 <fiprintf+0x1c>)
 80027c2:	ab05      	add	r3, sp, #20
 80027c4:	cb04      	ldmia	r3!, {r2}
 80027c6:	0001      	movs	r1, r0
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	f000 f846 	bl	800285c <_vfiprintf_r>
 80027d0:	bc1e      	pop	{r1, r2, r3, r4}
 80027d2:	bc08      	pop	{r3}
 80027d4:	b003      	add	sp, #12
 80027d6:	4718      	bx	r3
 80027d8:	20000064 	.word	0x20000064

080027dc <_sbrk_r>:
 80027dc:	2300      	movs	r3, #0
 80027de:	b570      	push	{r4, r5, r6, lr}
 80027e0:	4d06      	ldr	r5, [pc, #24]	; (80027fc <_sbrk_r+0x20>)
 80027e2:	0004      	movs	r4, r0
 80027e4:	0008      	movs	r0, r1
 80027e6:	602b      	str	r3, [r5, #0]
 80027e8:	f7fe f92e 	bl	8000a48 <_sbrk>
 80027ec:	1c43      	adds	r3, r0, #1
 80027ee:	d103      	bne.n	80027f8 <_sbrk_r+0x1c>
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d000      	beq.n	80027f8 <_sbrk_r+0x1c>
 80027f6:	6023      	str	r3, [r4, #0]
 80027f8:	bd70      	pop	{r4, r5, r6, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	2000024c 	.word	0x2000024c

08002800 <abort>:
 8002800:	2006      	movs	r0, #6
 8002802:	b510      	push	{r4, lr}
 8002804:	f000 fb96 	bl	8002f34 <raise>
 8002808:	2001      	movs	r0, #1
 800280a:	f7fe f8ac 	bl	8000966 <_exit>

0800280e <__sfputc_r>:
 800280e:	6893      	ldr	r3, [r2, #8]
 8002810:	b510      	push	{r4, lr}
 8002812:	3b01      	subs	r3, #1
 8002814:	6093      	str	r3, [r2, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	da04      	bge.n	8002824 <__sfputc_r+0x16>
 800281a:	6994      	ldr	r4, [r2, #24]
 800281c:	42a3      	cmp	r3, r4
 800281e:	db07      	blt.n	8002830 <__sfputc_r+0x22>
 8002820:	290a      	cmp	r1, #10
 8002822:	d005      	beq.n	8002830 <__sfputc_r+0x22>
 8002824:	6813      	ldr	r3, [r2, #0]
 8002826:	1c58      	adds	r0, r3, #1
 8002828:	6010      	str	r0, [r2, #0]
 800282a:	7019      	strb	r1, [r3, #0]
 800282c:	0008      	movs	r0, r1
 800282e:	bd10      	pop	{r4, pc}
 8002830:	f000 fab0 	bl	8002d94 <__swbuf_r>
 8002834:	0001      	movs	r1, r0
 8002836:	e7f9      	b.n	800282c <__sfputc_r+0x1e>

08002838 <__sfputs_r>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	0006      	movs	r6, r0
 800283c:	000f      	movs	r7, r1
 800283e:	0014      	movs	r4, r2
 8002840:	18d5      	adds	r5, r2, r3
 8002842:	42ac      	cmp	r4, r5
 8002844:	d101      	bne.n	800284a <__sfputs_r+0x12>
 8002846:	2000      	movs	r0, #0
 8002848:	e007      	b.n	800285a <__sfputs_r+0x22>
 800284a:	7821      	ldrb	r1, [r4, #0]
 800284c:	003a      	movs	r2, r7
 800284e:	0030      	movs	r0, r6
 8002850:	f7ff ffdd 	bl	800280e <__sfputc_r>
 8002854:	3401      	adds	r4, #1
 8002856:	1c43      	adds	r3, r0, #1
 8002858:	d1f3      	bne.n	8002842 <__sfputs_r+0xa>
 800285a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800285c <_vfiprintf_r>:
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b0a1      	sub	sp, #132	; 0x84
 8002860:	000f      	movs	r7, r1
 8002862:	0015      	movs	r5, r2
 8002864:	001e      	movs	r6, r3
 8002866:	9003      	str	r0, [sp, #12]
 8002868:	2800      	cmp	r0, #0
 800286a:	d004      	beq.n	8002876 <_vfiprintf_r+0x1a>
 800286c:	6a03      	ldr	r3, [r0, #32]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <_vfiprintf_r+0x1a>
 8002872:	f7ff fcc3 	bl	80021fc <__sinit>
 8002876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002878:	07db      	lsls	r3, r3, #31
 800287a:	d405      	bmi.n	8002888 <_vfiprintf_r+0x2c>
 800287c:	89bb      	ldrh	r3, [r7, #12]
 800287e:	059b      	lsls	r3, r3, #22
 8002880:	d402      	bmi.n	8002888 <_vfiprintf_r+0x2c>
 8002882:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002884:	f7ff fdbb 	bl	80023fe <__retarget_lock_acquire_recursive>
 8002888:	89bb      	ldrh	r3, [r7, #12]
 800288a:	071b      	lsls	r3, r3, #28
 800288c:	d502      	bpl.n	8002894 <_vfiprintf_r+0x38>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d113      	bne.n	80028bc <_vfiprintf_r+0x60>
 8002894:	0039      	movs	r1, r7
 8002896:	9803      	ldr	r0, [sp, #12]
 8002898:	f000 fabe 	bl	8002e18 <__swsetup_r>
 800289c:	2800      	cmp	r0, #0
 800289e:	d00d      	beq.n	80028bc <_vfiprintf_r+0x60>
 80028a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a2:	07db      	lsls	r3, r3, #31
 80028a4:	d503      	bpl.n	80028ae <_vfiprintf_r+0x52>
 80028a6:	2001      	movs	r0, #1
 80028a8:	4240      	negs	r0, r0
 80028aa:	b021      	add	sp, #132	; 0x84
 80028ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ae:	89bb      	ldrh	r3, [r7, #12]
 80028b0:	059b      	lsls	r3, r3, #22
 80028b2:	d4f8      	bmi.n	80028a6 <_vfiprintf_r+0x4a>
 80028b4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028b6:	f7ff fda3 	bl	8002400 <__retarget_lock_release_recursive>
 80028ba:	e7f4      	b.n	80028a6 <_vfiprintf_r+0x4a>
 80028bc:	2300      	movs	r3, #0
 80028be:	ac08      	add	r4, sp, #32
 80028c0:	6163      	str	r3, [r4, #20]
 80028c2:	3320      	adds	r3, #32
 80028c4:	7663      	strb	r3, [r4, #25]
 80028c6:	3310      	adds	r3, #16
 80028c8:	76a3      	strb	r3, [r4, #26]
 80028ca:	9607      	str	r6, [sp, #28]
 80028cc:	002e      	movs	r6, r5
 80028ce:	7833      	ldrb	r3, [r6, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <_vfiprintf_r+0x7c>
 80028d4:	2b25      	cmp	r3, #37	; 0x25
 80028d6:	d148      	bne.n	800296a <_vfiprintf_r+0x10e>
 80028d8:	1b73      	subs	r3, r6, r5
 80028da:	9305      	str	r3, [sp, #20]
 80028dc:	42ae      	cmp	r6, r5
 80028de:	d00b      	beq.n	80028f8 <_vfiprintf_r+0x9c>
 80028e0:	002a      	movs	r2, r5
 80028e2:	0039      	movs	r1, r7
 80028e4:	9803      	ldr	r0, [sp, #12]
 80028e6:	f7ff ffa7 	bl	8002838 <__sfputs_r>
 80028ea:	3001      	adds	r0, #1
 80028ec:	d100      	bne.n	80028f0 <_vfiprintf_r+0x94>
 80028ee:	e0af      	b.n	8002a50 <_vfiprintf_r+0x1f4>
 80028f0:	6963      	ldr	r3, [r4, #20]
 80028f2:	9a05      	ldr	r2, [sp, #20]
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	6163      	str	r3, [r4, #20]
 80028f8:	7833      	ldrb	r3, [r6, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d100      	bne.n	8002900 <_vfiprintf_r+0xa4>
 80028fe:	e0a7      	b.n	8002a50 <_vfiprintf_r+0x1f4>
 8002900:	2201      	movs	r2, #1
 8002902:	2300      	movs	r3, #0
 8002904:	4252      	negs	r2, r2
 8002906:	6062      	str	r2, [r4, #4]
 8002908:	a904      	add	r1, sp, #16
 800290a:	3254      	adds	r2, #84	; 0x54
 800290c:	1852      	adds	r2, r2, r1
 800290e:	1c75      	adds	r5, r6, #1
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	60e3      	str	r3, [r4, #12]
 8002914:	60a3      	str	r3, [r4, #8]
 8002916:	7013      	strb	r3, [r2, #0]
 8002918:	65a3      	str	r3, [r4, #88]	; 0x58
 800291a:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <_vfiprintf_r+0x224>)
 800291c:	2205      	movs	r2, #5
 800291e:	0018      	movs	r0, r3
 8002920:	7829      	ldrb	r1, [r5, #0]
 8002922:	9305      	str	r3, [sp, #20]
 8002924:	f000 fb26 	bl	8002f74 <memchr>
 8002928:	1c6e      	adds	r6, r5, #1
 800292a:	2800      	cmp	r0, #0
 800292c:	d11f      	bne.n	800296e <_vfiprintf_r+0x112>
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	06d3      	lsls	r3, r2, #27
 8002932:	d504      	bpl.n	800293e <_vfiprintf_r+0xe2>
 8002934:	2353      	movs	r3, #83	; 0x53
 8002936:	a904      	add	r1, sp, #16
 8002938:	185b      	adds	r3, r3, r1
 800293a:	2120      	movs	r1, #32
 800293c:	7019      	strb	r1, [r3, #0]
 800293e:	0713      	lsls	r3, r2, #28
 8002940:	d504      	bpl.n	800294c <_vfiprintf_r+0xf0>
 8002942:	2353      	movs	r3, #83	; 0x53
 8002944:	a904      	add	r1, sp, #16
 8002946:	185b      	adds	r3, r3, r1
 8002948:	212b      	movs	r1, #43	; 0x2b
 800294a:	7019      	strb	r1, [r3, #0]
 800294c:	782b      	ldrb	r3, [r5, #0]
 800294e:	2b2a      	cmp	r3, #42	; 0x2a
 8002950:	d016      	beq.n	8002980 <_vfiprintf_r+0x124>
 8002952:	002e      	movs	r6, r5
 8002954:	2100      	movs	r1, #0
 8002956:	200a      	movs	r0, #10
 8002958:	68e3      	ldr	r3, [r4, #12]
 800295a:	7832      	ldrb	r2, [r6, #0]
 800295c:	1c75      	adds	r5, r6, #1
 800295e:	3a30      	subs	r2, #48	; 0x30
 8002960:	2a09      	cmp	r2, #9
 8002962:	d94e      	bls.n	8002a02 <_vfiprintf_r+0x1a6>
 8002964:	2900      	cmp	r1, #0
 8002966:	d111      	bne.n	800298c <_vfiprintf_r+0x130>
 8002968:	e017      	b.n	800299a <_vfiprintf_r+0x13e>
 800296a:	3601      	adds	r6, #1
 800296c:	e7af      	b.n	80028ce <_vfiprintf_r+0x72>
 800296e:	9b05      	ldr	r3, [sp, #20]
 8002970:	6822      	ldr	r2, [r4, #0]
 8002972:	1ac0      	subs	r0, r0, r3
 8002974:	2301      	movs	r3, #1
 8002976:	4083      	lsls	r3, r0
 8002978:	4313      	orrs	r3, r2
 800297a:	0035      	movs	r5, r6
 800297c:	6023      	str	r3, [r4, #0]
 800297e:	e7cc      	b.n	800291a <_vfiprintf_r+0xbe>
 8002980:	9b07      	ldr	r3, [sp, #28]
 8002982:	1d19      	adds	r1, r3, #4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	9107      	str	r1, [sp, #28]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db01      	blt.n	8002990 <_vfiprintf_r+0x134>
 800298c:	930b      	str	r3, [sp, #44]	; 0x2c
 800298e:	e004      	b.n	800299a <_vfiprintf_r+0x13e>
 8002990:	425b      	negs	r3, r3
 8002992:	60e3      	str	r3, [r4, #12]
 8002994:	2302      	movs	r3, #2
 8002996:	4313      	orrs	r3, r2
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	7833      	ldrb	r3, [r6, #0]
 800299c:	2b2e      	cmp	r3, #46	; 0x2e
 800299e:	d10a      	bne.n	80029b6 <_vfiprintf_r+0x15a>
 80029a0:	7873      	ldrb	r3, [r6, #1]
 80029a2:	2b2a      	cmp	r3, #42	; 0x2a
 80029a4:	d135      	bne.n	8002a12 <_vfiprintf_r+0x1b6>
 80029a6:	9b07      	ldr	r3, [sp, #28]
 80029a8:	3602      	adds	r6, #2
 80029aa:	1d1a      	adds	r2, r3, #4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	9207      	str	r2, [sp, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db2b      	blt.n	8002a0c <_vfiprintf_r+0x1b0>
 80029b4:	9309      	str	r3, [sp, #36]	; 0x24
 80029b6:	4d33      	ldr	r5, [pc, #204]	; (8002a84 <_vfiprintf_r+0x228>)
 80029b8:	2203      	movs	r2, #3
 80029ba:	0028      	movs	r0, r5
 80029bc:	7831      	ldrb	r1, [r6, #0]
 80029be:	f000 fad9 	bl	8002f74 <memchr>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d006      	beq.n	80029d4 <_vfiprintf_r+0x178>
 80029c6:	2340      	movs	r3, #64	; 0x40
 80029c8:	1b40      	subs	r0, r0, r5
 80029ca:	4083      	lsls	r3, r0
 80029cc:	6822      	ldr	r2, [r4, #0]
 80029ce:	3601      	adds	r6, #1
 80029d0:	4313      	orrs	r3, r2
 80029d2:	6023      	str	r3, [r4, #0]
 80029d4:	7831      	ldrb	r1, [r6, #0]
 80029d6:	2206      	movs	r2, #6
 80029d8:	482b      	ldr	r0, [pc, #172]	; (8002a88 <_vfiprintf_r+0x22c>)
 80029da:	1c75      	adds	r5, r6, #1
 80029dc:	7621      	strb	r1, [r4, #24]
 80029de:	f000 fac9 	bl	8002f74 <memchr>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d043      	beq.n	8002a6e <_vfiprintf_r+0x212>
 80029e6:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <_vfiprintf_r+0x230>)
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d125      	bne.n	8002a38 <_vfiprintf_r+0x1dc>
 80029ec:	2207      	movs	r2, #7
 80029ee:	9b07      	ldr	r3, [sp, #28]
 80029f0:	3307      	adds	r3, #7
 80029f2:	4393      	bics	r3, r2
 80029f4:	3308      	adds	r3, #8
 80029f6:	9307      	str	r3, [sp, #28]
 80029f8:	6963      	ldr	r3, [r4, #20]
 80029fa:	9a04      	ldr	r2, [sp, #16]
 80029fc:	189b      	adds	r3, r3, r2
 80029fe:	6163      	str	r3, [r4, #20]
 8002a00:	e764      	b.n	80028cc <_vfiprintf_r+0x70>
 8002a02:	4343      	muls	r3, r0
 8002a04:	002e      	movs	r6, r5
 8002a06:	2101      	movs	r1, #1
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	e7a6      	b.n	800295a <_vfiprintf_r+0xfe>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	425b      	negs	r3, r3
 8002a10:	e7d0      	b.n	80029b4 <_vfiprintf_r+0x158>
 8002a12:	2300      	movs	r3, #0
 8002a14:	200a      	movs	r0, #10
 8002a16:	001a      	movs	r2, r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	6063      	str	r3, [r4, #4]
 8002a1c:	7831      	ldrb	r1, [r6, #0]
 8002a1e:	1c75      	adds	r5, r6, #1
 8002a20:	3930      	subs	r1, #48	; 0x30
 8002a22:	2909      	cmp	r1, #9
 8002a24:	d903      	bls.n	8002a2e <_vfiprintf_r+0x1d2>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0c5      	beq.n	80029b6 <_vfiprintf_r+0x15a>
 8002a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8002a2c:	e7c3      	b.n	80029b6 <_vfiprintf_r+0x15a>
 8002a2e:	4342      	muls	r2, r0
 8002a30:	002e      	movs	r6, r5
 8002a32:	2301      	movs	r3, #1
 8002a34:	1852      	adds	r2, r2, r1
 8002a36:	e7f1      	b.n	8002a1c <_vfiprintf_r+0x1c0>
 8002a38:	aa07      	add	r2, sp, #28
 8002a3a:	9200      	str	r2, [sp, #0]
 8002a3c:	0021      	movs	r1, r4
 8002a3e:	003a      	movs	r2, r7
 8002a40:	4b13      	ldr	r3, [pc, #76]	; (8002a90 <_vfiprintf_r+0x234>)
 8002a42:	9803      	ldr	r0, [sp, #12]
 8002a44:	e000      	b.n	8002a48 <_vfiprintf_r+0x1ec>
 8002a46:	bf00      	nop
 8002a48:	9004      	str	r0, [sp, #16]
 8002a4a:	9b04      	ldr	r3, [sp, #16]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	d1d3      	bne.n	80029f8 <_vfiprintf_r+0x19c>
 8002a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a52:	07db      	lsls	r3, r3, #31
 8002a54:	d405      	bmi.n	8002a62 <_vfiprintf_r+0x206>
 8002a56:	89bb      	ldrh	r3, [r7, #12]
 8002a58:	059b      	lsls	r3, r3, #22
 8002a5a:	d402      	bmi.n	8002a62 <_vfiprintf_r+0x206>
 8002a5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a5e:	f7ff fccf 	bl	8002400 <__retarget_lock_release_recursive>
 8002a62:	89bb      	ldrh	r3, [r7, #12]
 8002a64:	065b      	lsls	r3, r3, #25
 8002a66:	d500      	bpl.n	8002a6a <_vfiprintf_r+0x20e>
 8002a68:	e71d      	b.n	80028a6 <_vfiprintf_r+0x4a>
 8002a6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002a6c:	e71d      	b.n	80028aa <_vfiprintf_r+0x4e>
 8002a6e:	aa07      	add	r2, sp, #28
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	0021      	movs	r1, r4
 8002a74:	003a      	movs	r2, r7
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <_vfiprintf_r+0x234>)
 8002a78:	9803      	ldr	r0, [sp, #12]
 8002a7a:	f000 f87b 	bl	8002b74 <_printf_i>
 8002a7e:	e7e3      	b.n	8002a48 <_vfiprintf_r+0x1ec>
 8002a80:	080031b7 	.word	0x080031b7
 8002a84:	080031bd 	.word	0x080031bd
 8002a88:	080031c1 	.word	0x080031c1
 8002a8c:	00000000 	.word	0x00000000
 8002a90:	08002839 	.word	0x08002839

08002a94 <_printf_common>:
 8002a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a96:	0016      	movs	r6, r2
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	688a      	ldr	r2, [r1, #8]
 8002a9c:	690b      	ldr	r3, [r1, #16]
 8002a9e:	000c      	movs	r4, r1
 8002aa0:	9000      	str	r0, [sp, #0]
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	da00      	bge.n	8002aa8 <_printf_common+0x14>
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	0022      	movs	r2, r4
 8002aaa:	6033      	str	r3, [r6, #0]
 8002aac:	3243      	adds	r2, #67	; 0x43
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	d001      	beq.n	8002ab8 <_printf_common+0x24>
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	6033      	str	r3, [r6, #0]
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	069b      	lsls	r3, r3, #26
 8002abc:	d502      	bpl.n	8002ac4 <_printf_common+0x30>
 8002abe:	6833      	ldr	r3, [r6, #0]
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	6033      	str	r3, [r6, #0]
 8002ac4:	6822      	ldr	r2, [r4, #0]
 8002ac6:	2306      	movs	r3, #6
 8002ac8:	0015      	movs	r5, r2
 8002aca:	401d      	ands	r5, r3
 8002acc:	421a      	tst	r2, r3
 8002ace:	d027      	beq.n	8002b20 <_printf_common+0x8c>
 8002ad0:	0023      	movs	r3, r4
 8002ad2:	3343      	adds	r3, #67	; 0x43
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	4193      	sbcs	r3, r2
 8002ada:	6822      	ldr	r2, [r4, #0]
 8002adc:	0692      	lsls	r2, r2, #26
 8002ade:	d430      	bmi.n	8002b42 <_printf_common+0xae>
 8002ae0:	0022      	movs	r2, r4
 8002ae2:	9901      	ldr	r1, [sp, #4]
 8002ae4:	9800      	ldr	r0, [sp, #0]
 8002ae6:	9d08      	ldr	r5, [sp, #32]
 8002ae8:	3243      	adds	r2, #67	; 0x43
 8002aea:	47a8      	blx	r5
 8002aec:	3001      	adds	r0, #1
 8002aee:	d025      	beq.n	8002b3c <_printf_common+0xa8>
 8002af0:	2206      	movs	r2, #6
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	2500      	movs	r5, #0
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d105      	bne.n	8002b08 <_printf_common+0x74>
 8002afc:	6833      	ldr	r3, [r6, #0]
 8002afe:	68e5      	ldr	r5, [r4, #12]
 8002b00:	1aed      	subs	r5, r5, r3
 8002b02:	43eb      	mvns	r3, r5
 8002b04:	17db      	asrs	r3, r3, #31
 8002b06:	401d      	ands	r5, r3
 8002b08:	68a3      	ldr	r3, [r4, #8]
 8002b0a:	6922      	ldr	r2, [r4, #16]
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	dd01      	ble.n	8002b14 <_printf_common+0x80>
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	18ed      	adds	r5, r5, r3
 8002b14:	2600      	movs	r6, #0
 8002b16:	42b5      	cmp	r5, r6
 8002b18:	d120      	bne.n	8002b5c <_printf_common+0xc8>
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	e010      	b.n	8002b40 <_printf_common+0xac>
 8002b1e:	3501      	adds	r5, #1
 8002b20:	68e3      	ldr	r3, [r4, #12]
 8002b22:	6832      	ldr	r2, [r6, #0]
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	42ab      	cmp	r3, r5
 8002b28:	ddd2      	ble.n	8002ad0 <_printf_common+0x3c>
 8002b2a:	0022      	movs	r2, r4
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	9901      	ldr	r1, [sp, #4]
 8002b30:	9800      	ldr	r0, [sp, #0]
 8002b32:	9f08      	ldr	r7, [sp, #32]
 8002b34:	3219      	adds	r2, #25
 8002b36:	47b8      	blx	r7
 8002b38:	3001      	adds	r0, #1
 8002b3a:	d1f0      	bne.n	8002b1e <_printf_common+0x8a>
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	4240      	negs	r0, r0
 8002b40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b42:	2030      	movs	r0, #48	; 0x30
 8002b44:	18e1      	adds	r1, r4, r3
 8002b46:	3143      	adds	r1, #67	; 0x43
 8002b48:	7008      	strb	r0, [r1, #0]
 8002b4a:	0021      	movs	r1, r4
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	3145      	adds	r1, #69	; 0x45
 8002b50:	7809      	ldrb	r1, [r1, #0]
 8002b52:	18a2      	adds	r2, r4, r2
 8002b54:	3243      	adds	r2, #67	; 0x43
 8002b56:	3302      	adds	r3, #2
 8002b58:	7011      	strb	r1, [r2, #0]
 8002b5a:	e7c1      	b.n	8002ae0 <_printf_common+0x4c>
 8002b5c:	0022      	movs	r2, r4
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9901      	ldr	r1, [sp, #4]
 8002b62:	9800      	ldr	r0, [sp, #0]
 8002b64:	9f08      	ldr	r7, [sp, #32]
 8002b66:	321a      	adds	r2, #26
 8002b68:	47b8      	blx	r7
 8002b6a:	3001      	adds	r0, #1
 8002b6c:	d0e6      	beq.n	8002b3c <_printf_common+0xa8>
 8002b6e:	3601      	adds	r6, #1
 8002b70:	e7d1      	b.n	8002b16 <_printf_common+0x82>
	...

08002b74 <_printf_i>:
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	b08b      	sub	sp, #44	; 0x2c
 8002b78:	9206      	str	r2, [sp, #24]
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	3243      	adds	r2, #67	; 0x43
 8002b7e:	9307      	str	r3, [sp, #28]
 8002b80:	9005      	str	r0, [sp, #20]
 8002b82:	9204      	str	r2, [sp, #16]
 8002b84:	7e0a      	ldrb	r2, [r1, #24]
 8002b86:	000c      	movs	r4, r1
 8002b88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002b8a:	2a78      	cmp	r2, #120	; 0x78
 8002b8c:	d809      	bhi.n	8002ba2 <_printf_i+0x2e>
 8002b8e:	2a62      	cmp	r2, #98	; 0x62
 8002b90:	d80b      	bhi.n	8002baa <_printf_i+0x36>
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d100      	bne.n	8002b98 <_printf_i+0x24>
 8002b96:	e0be      	b.n	8002d16 <_printf_i+0x1a2>
 8002b98:	497c      	ldr	r1, [pc, #496]	; (8002d8c <_printf_i+0x218>)
 8002b9a:	9103      	str	r1, [sp, #12]
 8002b9c:	2a58      	cmp	r2, #88	; 0x58
 8002b9e:	d100      	bne.n	8002ba2 <_printf_i+0x2e>
 8002ba0:	e093      	b.n	8002cca <_printf_i+0x156>
 8002ba2:	0026      	movs	r6, r4
 8002ba4:	3642      	adds	r6, #66	; 0x42
 8002ba6:	7032      	strb	r2, [r6, #0]
 8002ba8:	e022      	b.n	8002bf0 <_printf_i+0x7c>
 8002baa:	0010      	movs	r0, r2
 8002bac:	3863      	subs	r0, #99	; 0x63
 8002bae:	2815      	cmp	r0, #21
 8002bb0:	d8f7      	bhi.n	8002ba2 <_printf_i+0x2e>
 8002bb2:	f7fd faa9 	bl	8000108 <__gnu_thumb1_case_shi>
 8002bb6:	0016      	.short	0x0016
 8002bb8:	fff6001f 	.word	0xfff6001f
 8002bbc:	fff6fff6 	.word	0xfff6fff6
 8002bc0:	001ffff6 	.word	0x001ffff6
 8002bc4:	fff6fff6 	.word	0xfff6fff6
 8002bc8:	fff6fff6 	.word	0xfff6fff6
 8002bcc:	003600a3 	.word	0x003600a3
 8002bd0:	fff60083 	.word	0xfff60083
 8002bd4:	00b4fff6 	.word	0x00b4fff6
 8002bd8:	0036fff6 	.word	0x0036fff6
 8002bdc:	fff6fff6 	.word	0xfff6fff6
 8002be0:	0087      	.short	0x0087
 8002be2:	0026      	movs	r6, r4
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	3642      	adds	r6, #66	; 0x42
 8002be8:	1d11      	adds	r1, r2, #4
 8002bea:	6019      	str	r1, [r3, #0]
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	7033      	strb	r3, [r6, #0]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0a2      	b.n	8002d3a <_printf_i+0x1c6>
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	6809      	ldr	r1, [r1, #0]
 8002bf8:	1d02      	adds	r2, r0, #4
 8002bfa:	060d      	lsls	r5, r1, #24
 8002bfc:	d50b      	bpl.n	8002c16 <_printf_i+0xa2>
 8002bfe:	6805      	ldr	r5, [r0, #0]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	2d00      	cmp	r5, #0
 8002c04:	da03      	bge.n	8002c0e <_printf_i+0x9a>
 8002c06:	232d      	movs	r3, #45	; 0x2d
 8002c08:	9a04      	ldr	r2, [sp, #16]
 8002c0a:	426d      	negs	r5, r5
 8002c0c:	7013      	strb	r3, [r2, #0]
 8002c0e:	4b5f      	ldr	r3, [pc, #380]	; (8002d8c <_printf_i+0x218>)
 8002c10:	270a      	movs	r7, #10
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	e01b      	b.n	8002c4e <_printf_i+0xda>
 8002c16:	6805      	ldr	r5, [r0, #0]
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	0649      	lsls	r1, r1, #25
 8002c1c:	d5f1      	bpl.n	8002c02 <_printf_i+0x8e>
 8002c1e:	b22d      	sxth	r5, r5
 8002c20:	e7ef      	b.n	8002c02 <_printf_i+0x8e>
 8002c22:	680d      	ldr	r5, [r1, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	1d08      	adds	r0, r1, #4
 8002c28:	6018      	str	r0, [r3, #0]
 8002c2a:	062e      	lsls	r6, r5, #24
 8002c2c:	d501      	bpl.n	8002c32 <_printf_i+0xbe>
 8002c2e:	680d      	ldr	r5, [r1, #0]
 8002c30:	e003      	b.n	8002c3a <_printf_i+0xc6>
 8002c32:	066d      	lsls	r5, r5, #25
 8002c34:	d5fb      	bpl.n	8002c2e <_printf_i+0xba>
 8002c36:	680d      	ldr	r5, [r1, #0]
 8002c38:	b2ad      	uxth	r5, r5
 8002c3a:	4b54      	ldr	r3, [pc, #336]	; (8002d8c <_printf_i+0x218>)
 8002c3c:	2708      	movs	r7, #8
 8002c3e:	9303      	str	r3, [sp, #12]
 8002c40:	2a6f      	cmp	r2, #111	; 0x6f
 8002c42:	d000      	beq.n	8002c46 <_printf_i+0xd2>
 8002c44:	3702      	adds	r7, #2
 8002c46:	0023      	movs	r3, r4
 8002c48:	2200      	movs	r2, #0
 8002c4a:	3343      	adds	r3, #67	; 0x43
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	60a3      	str	r3, [r4, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db03      	blt.n	8002c5e <_printf_i+0xea>
 8002c56:	2104      	movs	r1, #4
 8002c58:	6822      	ldr	r2, [r4, #0]
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	6022      	str	r2, [r4, #0]
 8002c5e:	2d00      	cmp	r5, #0
 8002c60:	d102      	bne.n	8002c68 <_printf_i+0xf4>
 8002c62:	9e04      	ldr	r6, [sp, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <_printf_i+0x10e>
 8002c68:	9e04      	ldr	r6, [sp, #16]
 8002c6a:	0028      	movs	r0, r5
 8002c6c:	0039      	movs	r1, r7
 8002c6e:	f7fd fadb 	bl	8000228 <__aeabi_uidivmod>
 8002c72:	9b03      	ldr	r3, [sp, #12]
 8002c74:	3e01      	subs	r6, #1
 8002c76:	5c5b      	ldrb	r3, [r3, r1]
 8002c78:	7033      	strb	r3, [r6, #0]
 8002c7a:	002b      	movs	r3, r5
 8002c7c:	0005      	movs	r5, r0
 8002c7e:	429f      	cmp	r7, r3
 8002c80:	d9f3      	bls.n	8002c6a <_printf_i+0xf6>
 8002c82:	2f08      	cmp	r7, #8
 8002c84:	d109      	bne.n	8002c9a <_printf_i+0x126>
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	07db      	lsls	r3, r3, #31
 8002c8a:	d506      	bpl.n	8002c9a <_printf_i+0x126>
 8002c8c:	6862      	ldr	r2, [r4, #4]
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dc02      	bgt.n	8002c9a <_printf_i+0x126>
 8002c94:	2330      	movs	r3, #48	; 0x30
 8002c96:	3e01      	subs	r6, #1
 8002c98:	7033      	strb	r3, [r6, #0]
 8002c9a:	9b04      	ldr	r3, [sp, #16]
 8002c9c:	1b9b      	subs	r3, r3, r6
 8002c9e:	6123      	str	r3, [r4, #16]
 8002ca0:	9b07      	ldr	r3, [sp, #28]
 8002ca2:	0021      	movs	r1, r4
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	9805      	ldr	r0, [sp, #20]
 8002ca8:	9b06      	ldr	r3, [sp, #24]
 8002caa:	aa09      	add	r2, sp, #36	; 0x24
 8002cac:	f7ff fef2 	bl	8002a94 <_printf_common>
 8002cb0:	3001      	adds	r0, #1
 8002cb2:	d147      	bne.n	8002d44 <_printf_i+0x1d0>
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	4240      	negs	r0, r0
 8002cb8:	b00b      	add	sp, #44	; 0x2c
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	6809      	ldr	r1, [r1, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	6022      	str	r2, [r4, #0]
 8002cc4:	2278      	movs	r2, #120	; 0x78
 8002cc6:	4932      	ldr	r1, [pc, #200]	; (8002d90 <_printf_i+0x21c>)
 8002cc8:	9103      	str	r1, [sp, #12]
 8002cca:	0021      	movs	r1, r4
 8002ccc:	3145      	adds	r1, #69	; 0x45
 8002cce:	700a      	strb	r2, [r1, #0]
 8002cd0:	6819      	ldr	r1, [r3, #0]
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	c920      	ldmia	r1!, {r5}
 8002cd6:	0610      	lsls	r0, r2, #24
 8002cd8:	d402      	bmi.n	8002ce0 <_printf_i+0x16c>
 8002cda:	0650      	lsls	r0, r2, #25
 8002cdc:	d500      	bpl.n	8002ce0 <_printf_i+0x16c>
 8002cde:	b2ad      	uxth	r5, r5
 8002ce0:	6019      	str	r1, [r3, #0]
 8002ce2:	07d3      	lsls	r3, r2, #31
 8002ce4:	d502      	bpl.n	8002cec <_printf_i+0x178>
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	6023      	str	r3, [r4, #0]
 8002cec:	2710      	movs	r7, #16
 8002cee:	2d00      	cmp	r5, #0
 8002cf0:	d1a9      	bne.n	8002c46 <_printf_i+0xd2>
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	e7a4      	b.n	8002c46 <_printf_i+0xd2>
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	680d      	ldr	r5, [r1, #0]
 8002d00:	1d10      	adds	r0, r2, #4
 8002d02:	6949      	ldr	r1, [r1, #20]
 8002d04:	6018      	str	r0, [r3, #0]
 8002d06:	6813      	ldr	r3, [r2, #0]
 8002d08:	062e      	lsls	r6, r5, #24
 8002d0a:	d501      	bpl.n	8002d10 <_printf_i+0x19c>
 8002d0c:	6019      	str	r1, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <_printf_i+0x1a2>
 8002d10:	066d      	lsls	r5, r5, #25
 8002d12:	d5fb      	bpl.n	8002d0c <_printf_i+0x198>
 8002d14:	8019      	strh	r1, [r3, #0]
 8002d16:	2300      	movs	r3, #0
 8002d18:	9e04      	ldr	r6, [sp, #16]
 8002d1a:	6123      	str	r3, [r4, #16]
 8002d1c:	e7c0      	b.n	8002ca0 <_printf_i+0x12c>
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	1d11      	adds	r1, r2, #4
 8002d22:	6019      	str	r1, [r3, #0]
 8002d24:	6816      	ldr	r6, [r2, #0]
 8002d26:	2100      	movs	r1, #0
 8002d28:	0030      	movs	r0, r6
 8002d2a:	6862      	ldr	r2, [r4, #4]
 8002d2c:	f000 f922 	bl	8002f74 <memchr>
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d001      	beq.n	8002d38 <_printf_i+0x1c4>
 8002d34:	1b80      	subs	r0, r0, r6
 8002d36:	6060      	str	r0, [r4, #4]
 8002d38:	6863      	ldr	r3, [r4, #4]
 8002d3a:	6123      	str	r3, [r4, #16]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9a04      	ldr	r2, [sp, #16]
 8002d40:	7013      	strb	r3, [r2, #0]
 8002d42:	e7ad      	b.n	8002ca0 <_printf_i+0x12c>
 8002d44:	0032      	movs	r2, r6
 8002d46:	6923      	ldr	r3, [r4, #16]
 8002d48:	9906      	ldr	r1, [sp, #24]
 8002d4a:	9805      	ldr	r0, [sp, #20]
 8002d4c:	9d07      	ldr	r5, [sp, #28]
 8002d4e:	47a8      	blx	r5
 8002d50:	3001      	adds	r0, #1
 8002d52:	d0af      	beq.n	8002cb4 <_printf_i+0x140>
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	079b      	lsls	r3, r3, #30
 8002d58:	d415      	bmi.n	8002d86 <_printf_i+0x212>
 8002d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d5c:	68e0      	ldr	r0, [r4, #12]
 8002d5e:	4298      	cmp	r0, r3
 8002d60:	daaa      	bge.n	8002cb8 <_printf_i+0x144>
 8002d62:	0018      	movs	r0, r3
 8002d64:	e7a8      	b.n	8002cb8 <_printf_i+0x144>
 8002d66:	0022      	movs	r2, r4
 8002d68:	2301      	movs	r3, #1
 8002d6a:	9906      	ldr	r1, [sp, #24]
 8002d6c:	9805      	ldr	r0, [sp, #20]
 8002d6e:	9e07      	ldr	r6, [sp, #28]
 8002d70:	3219      	adds	r2, #25
 8002d72:	47b0      	blx	r6
 8002d74:	3001      	adds	r0, #1
 8002d76:	d09d      	beq.n	8002cb4 <_printf_i+0x140>
 8002d78:	3501      	adds	r5, #1
 8002d7a:	68e3      	ldr	r3, [r4, #12]
 8002d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	42ab      	cmp	r3, r5
 8002d82:	dcf0      	bgt.n	8002d66 <_printf_i+0x1f2>
 8002d84:	e7e9      	b.n	8002d5a <_printf_i+0x1e6>
 8002d86:	2500      	movs	r5, #0
 8002d88:	e7f7      	b.n	8002d7a <_printf_i+0x206>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	080031c8 	.word	0x080031c8
 8002d90:	080031d9 	.word	0x080031d9

08002d94 <__swbuf_r>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	0006      	movs	r6, r0
 8002d98:	000d      	movs	r5, r1
 8002d9a:	0014      	movs	r4, r2
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d004      	beq.n	8002daa <__swbuf_r+0x16>
 8002da0:	6a03      	ldr	r3, [r0, #32]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <__swbuf_r+0x16>
 8002da6:	f7ff fa29 	bl	80021fc <__sinit>
 8002daa:	69a3      	ldr	r3, [r4, #24]
 8002dac:	60a3      	str	r3, [r4, #8]
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	071b      	lsls	r3, r3, #28
 8002db2:	d528      	bpl.n	8002e06 <__swbuf_r+0x72>
 8002db4:	6923      	ldr	r3, [r4, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d025      	beq.n	8002e06 <__swbuf_r+0x72>
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	6820      	ldr	r0, [r4, #0]
 8002dbe:	b2ef      	uxtb	r7, r5
 8002dc0:	1ac0      	subs	r0, r0, r3
 8002dc2:	6963      	ldr	r3, [r4, #20]
 8002dc4:	b2ed      	uxtb	r5, r5
 8002dc6:	4283      	cmp	r3, r0
 8002dc8:	dc05      	bgt.n	8002dd6 <__swbuf_r+0x42>
 8002dca:	0021      	movs	r1, r4
 8002dcc:	0030      	movs	r0, r6
 8002dce:	f7ff fcc9 	bl	8002764 <_fflush_r>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d11d      	bne.n	8002e12 <__swbuf_r+0x7e>
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	3001      	adds	r0, #1
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	60a3      	str	r3, [r4, #8]
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	6022      	str	r2, [r4, #0]
 8002de4:	701f      	strb	r7, [r3, #0]
 8002de6:	6963      	ldr	r3, [r4, #20]
 8002de8:	4283      	cmp	r3, r0
 8002dea:	d004      	beq.n	8002df6 <__swbuf_r+0x62>
 8002dec:	89a3      	ldrh	r3, [r4, #12]
 8002dee:	07db      	lsls	r3, r3, #31
 8002df0:	d507      	bpl.n	8002e02 <__swbuf_r+0x6e>
 8002df2:	2d0a      	cmp	r5, #10
 8002df4:	d105      	bne.n	8002e02 <__swbuf_r+0x6e>
 8002df6:	0021      	movs	r1, r4
 8002df8:	0030      	movs	r0, r6
 8002dfa:	f7ff fcb3 	bl	8002764 <_fflush_r>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d107      	bne.n	8002e12 <__swbuf_r+0x7e>
 8002e02:	0028      	movs	r0, r5
 8002e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e06:	0021      	movs	r1, r4
 8002e08:	0030      	movs	r0, r6
 8002e0a:	f000 f805 	bl	8002e18 <__swsetup_r>
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d0d3      	beq.n	8002dba <__swbuf_r+0x26>
 8002e12:	2501      	movs	r5, #1
 8002e14:	426d      	negs	r5, r5
 8002e16:	e7f4      	b.n	8002e02 <__swbuf_r+0x6e>

08002e18 <__swsetup_r>:
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <__swsetup_r+0xc4>)
 8002e1a:	b570      	push	{r4, r5, r6, lr}
 8002e1c:	0005      	movs	r5, r0
 8002e1e:	6818      	ldr	r0, [r3, #0]
 8002e20:	000c      	movs	r4, r1
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d004      	beq.n	8002e30 <__swsetup_r+0x18>
 8002e26:	6a03      	ldr	r3, [r0, #32]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <__swsetup_r+0x18>
 8002e2c:	f7ff f9e6 	bl	80021fc <__sinit>
 8002e30:	230c      	movs	r3, #12
 8002e32:	5ee2      	ldrsh	r2, [r4, r3]
 8002e34:	b293      	uxth	r3, r2
 8002e36:	0711      	lsls	r1, r2, #28
 8002e38:	d423      	bmi.n	8002e82 <__swsetup_r+0x6a>
 8002e3a:	06d9      	lsls	r1, r3, #27
 8002e3c:	d407      	bmi.n	8002e4e <__swsetup_r+0x36>
 8002e3e:	2309      	movs	r3, #9
 8002e40:	2001      	movs	r0, #1
 8002e42:	602b      	str	r3, [r5, #0]
 8002e44:	3337      	adds	r3, #55	; 0x37
 8002e46:	4313      	orrs	r3, r2
 8002e48:	81a3      	strh	r3, [r4, #12]
 8002e4a:	4240      	negs	r0, r0
 8002e4c:	bd70      	pop	{r4, r5, r6, pc}
 8002e4e:	075b      	lsls	r3, r3, #29
 8002e50:	d513      	bpl.n	8002e7a <__swsetup_r+0x62>
 8002e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d008      	beq.n	8002e6a <__swsetup_r+0x52>
 8002e58:	0023      	movs	r3, r4
 8002e5a:	3344      	adds	r3, #68	; 0x44
 8002e5c:	4299      	cmp	r1, r3
 8002e5e:	d002      	beq.n	8002e66 <__swsetup_r+0x4e>
 8002e60:	0028      	movs	r0, r5
 8002e62:	f7ff faed 	bl	8002440 <_free_r>
 8002e66:	2300      	movs	r3, #0
 8002e68:	6363      	str	r3, [r4, #52]	; 0x34
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	89a3      	ldrh	r3, [r4, #12]
 8002e6e:	4393      	bics	r3, r2
 8002e70:	81a3      	strh	r3, [r4, #12]
 8002e72:	2300      	movs	r3, #0
 8002e74:	6063      	str	r3, [r4, #4]
 8002e76:	6923      	ldr	r3, [r4, #16]
 8002e78:	6023      	str	r3, [r4, #0]
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	89a2      	ldrh	r2, [r4, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	81a3      	strh	r3, [r4, #12]
 8002e82:	6923      	ldr	r3, [r4, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <__swsetup_r+0x88>
 8002e88:	21a0      	movs	r1, #160	; 0xa0
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	0089      	lsls	r1, r1, #2
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	400b      	ands	r3, r1
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <__swsetup_r+0x88>
 8002e98:	0021      	movs	r1, r4
 8002e9a:	0028      	movs	r0, r5
 8002e9c:	f000 f89e 	bl	8002fdc <__smakebuf_r>
 8002ea0:	220c      	movs	r2, #12
 8002ea2:	5ea3      	ldrsh	r3, [r4, r2]
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	b299      	uxth	r1, r3
 8002eaa:	4002      	ands	r2, r0
 8002eac:	4203      	tst	r3, r0
 8002eae:	d00f      	beq.n	8002ed0 <__swsetup_r+0xb8>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	60a2      	str	r2, [r4, #8]
 8002eb4:	6962      	ldr	r2, [r4, #20]
 8002eb6:	4252      	negs	r2, r2
 8002eb8:	61a2      	str	r2, [r4, #24]
 8002eba:	2000      	movs	r0, #0
 8002ebc:	6922      	ldr	r2, [r4, #16]
 8002ebe:	4282      	cmp	r2, r0
 8002ec0:	d1c4      	bne.n	8002e4c <__swsetup_r+0x34>
 8002ec2:	0609      	lsls	r1, r1, #24
 8002ec4:	d5c2      	bpl.n	8002e4c <__swsetup_r+0x34>
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	81a3      	strh	r3, [r4, #12]
 8002ecc:	3801      	subs	r0, #1
 8002ece:	e7bd      	b.n	8002e4c <__swsetup_r+0x34>
 8002ed0:	0788      	lsls	r0, r1, #30
 8002ed2:	d400      	bmi.n	8002ed6 <__swsetup_r+0xbe>
 8002ed4:	6962      	ldr	r2, [r4, #20]
 8002ed6:	60a2      	str	r2, [r4, #8]
 8002ed8:	e7ef      	b.n	8002eba <__swsetup_r+0xa2>
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20000064 	.word	0x20000064

08002ee0 <_raise_r>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	0004      	movs	r4, r0
 8002ee4:	000d      	movs	r5, r1
 8002ee6:	291f      	cmp	r1, #31
 8002ee8:	d904      	bls.n	8002ef4 <_raise_r+0x14>
 8002eea:	2316      	movs	r3, #22
 8002eec:	6003      	str	r3, [r0, #0]
 8002eee:	2001      	movs	r0, #1
 8002ef0:	4240      	negs	r0, r0
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <_raise_r+0x24>
 8002efa:	008a      	lsls	r2, r1, #2
 8002efc:	189b      	adds	r3, r3, r2
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	d108      	bne.n	8002f16 <_raise_r+0x36>
 8002f04:	0020      	movs	r0, r4
 8002f06:	f000 f831 	bl	8002f6c <_getpid_r>
 8002f0a:	002a      	movs	r2, r5
 8002f0c:	0001      	movs	r1, r0
 8002f0e:	0020      	movs	r0, r4
 8002f10:	f000 f81a 	bl	8002f48 <_kill_r>
 8002f14:	e7ed      	b.n	8002ef2 <_raise_r+0x12>
 8002f16:	2000      	movs	r0, #0
 8002f18:	2a01      	cmp	r2, #1
 8002f1a:	d0ea      	beq.n	8002ef2 <_raise_r+0x12>
 8002f1c:	1c51      	adds	r1, r2, #1
 8002f1e:	d103      	bne.n	8002f28 <_raise_r+0x48>
 8002f20:	2316      	movs	r3, #22
 8002f22:	3001      	adds	r0, #1
 8002f24:	6023      	str	r3, [r4, #0]
 8002f26:	e7e4      	b.n	8002ef2 <_raise_r+0x12>
 8002f28:	2400      	movs	r4, #0
 8002f2a:	0028      	movs	r0, r5
 8002f2c:	601c      	str	r4, [r3, #0]
 8002f2e:	4790      	blx	r2
 8002f30:	0020      	movs	r0, r4
 8002f32:	e7de      	b.n	8002ef2 <_raise_r+0x12>

08002f34 <raise>:
 8002f34:	b510      	push	{r4, lr}
 8002f36:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <raise+0x10>)
 8002f38:	0001      	movs	r1, r0
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	f7ff ffd0 	bl	8002ee0 <_raise_r>
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	20000064 	.word	0x20000064

08002f48 <_kill_r>:
 8002f48:	2300      	movs	r3, #0
 8002f4a:	b570      	push	{r4, r5, r6, lr}
 8002f4c:	4d06      	ldr	r5, [pc, #24]	; (8002f68 <_kill_r+0x20>)
 8002f4e:	0004      	movs	r4, r0
 8002f50:	0008      	movs	r0, r1
 8002f52:	0011      	movs	r1, r2
 8002f54:	602b      	str	r3, [r5, #0]
 8002f56:	f7fd fcf6 	bl	8000946 <_kill>
 8002f5a:	1c43      	adds	r3, r0, #1
 8002f5c:	d103      	bne.n	8002f66 <_kill_r+0x1e>
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d000      	beq.n	8002f66 <_kill_r+0x1e>
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	bd70      	pop	{r4, r5, r6, pc}
 8002f68:	2000024c 	.word	0x2000024c

08002f6c <_getpid_r>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	f7fd fce4 	bl	800093a <_getpid>
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <memchr>:
 8002f74:	b2c9      	uxtb	r1, r1
 8002f76:	1882      	adds	r2, r0, r2
 8002f78:	4290      	cmp	r0, r2
 8002f7a:	d101      	bne.n	8002f80 <memchr+0xc>
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	4770      	bx	lr
 8002f80:	7803      	ldrb	r3, [r0, #0]
 8002f82:	428b      	cmp	r3, r1
 8002f84:	d0fb      	beq.n	8002f7e <memchr+0xa>
 8002f86:	3001      	adds	r0, #1
 8002f88:	e7f6      	b.n	8002f78 <memchr+0x4>
	...

08002f8c <__swhatbuf_r>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	000e      	movs	r6, r1
 8002f90:	001d      	movs	r5, r3
 8002f92:	230e      	movs	r3, #14
 8002f94:	5ec9      	ldrsh	r1, [r1, r3]
 8002f96:	0014      	movs	r4, r2
 8002f98:	b096      	sub	sp, #88	; 0x58
 8002f9a:	2900      	cmp	r1, #0
 8002f9c:	da0c      	bge.n	8002fb8 <__swhatbuf_r+0x2c>
 8002f9e:	89b2      	ldrh	r2, [r6, #12]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	4019      	ands	r1, r3
 8002fa6:	421a      	tst	r2, r3
 8002fa8:	d013      	beq.n	8002fd2 <__swhatbuf_r+0x46>
 8002faa:	2100      	movs	r1, #0
 8002fac:	3b40      	subs	r3, #64	; 0x40
 8002fae:	2000      	movs	r0, #0
 8002fb0:	6029      	str	r1, [r5, #0]
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	b016      	add	sp, #88	; 0x58
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	466a      	mov	r2, sp
 8002fba:	f000 f84d 	bl	8003058 <_fstat_r>
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	dbed      	blt.n	8002f9e <__swhatbuf_r+0x12>
 8002fc2:	23f0      	movs	r3, #240	; 0xf0
 8002fc4:	9901      	ldr	r1, [sp, #4]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	4019      	ands	r1, r3
 8002fca:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <__swhatbuf_r+0x4c>)
 8002fcc:	18c9      	adds	r1, r1, r3
 8002fce:	424b      	negs	r3, r1
 8002fd0:	4159      	adcs	r1, r3
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	e7ea      	b.n	8002fae <__swhatbuf_r+0x22>
 8002fd8:	ffffe000 	.word	0xffffe000

08002fdc <__smakebuf_r>:
 8002fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fde:	2602      	movs	r6, #2
 8002fe0:	898b      	ldrh	r3, [r1, #12]
 8002fe2:	0005      	movs	r5, r0
 8002fe4:	000c      	movs	r4, r1
 8002fe6:	4233      	tst	r3, r6
 8002fe8:	d006      	beq.n	8002ff8 <__smakebuf_r+0x1c>
 8002fea:	0023      	movs	r3, r4
 8002fec:	3347      	adds	r3, #71	; 0x47
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6163      	str	r3, [r4, #20]
 8002ff6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002ff8:	466a      	mov	r2, sp
 8002ffa:	ab01      	add	r3, sp, #4
 8002ffc:	f7ff ffc6 	bl	8002f8c <__swhatbuf_r>
 8003000:	9900      	ldr	r1, [sp, #0]
 8003002:	0007      	movs	r7, r0
 8003004:	0028      	movs	r0, r5
 8003006:	f7ff fa91 	bl	800252c <_malloc_r>
 800300a:	2800      	cmp	r0, #0
 800300c:	d108      	bne.n	8003020 <__smakebuf_r+0x44>
 800300e:	220c      	movs	r2, #12
 8003010:	5ea3      	ldrsh	r3, [r4, r2]
 8003012:	059a      	lsls	r2, r3, #22
 8003014:	d4ef      	bmi.n	8002ff6 <__smakebuf_r+0x1a>
 8003016:	2203      	movs	r2, #3
 8003018:	4393      	bics	r3, r2
 800301a:	431e      	orrs	r6, r3
 800301c:	81a6      	strh	r6, [r4, #12]
 800301e:	e7e4      	b.n	8002fea <__smakebuf_r+0xe>
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	89a2      	ldrh	r2, [r4, #12]
 8003024:	6020      	str	r0, [r4, #0]
 8003026:	4313      	orrs	r3, r2
 8003028:	81a3      	strh	r3, [r4, #12]
 800302a:	9b00      	ldr	r3, [sp, #0]
 800302c:	6120      	str	r0, [r4, #16]
 800302e:	6163      	str	r3, [r4, #20]
 8003030:	9b01      	ldr	r3, [sp, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <__smakebuf_r+0x74>
 8003036:	0028      	movs	r0, r5
 8003038:	230e      	movs	r3, #14
 800303a:	5ee1      	ldrsh	r1, [r4, r3]
 800303c:	f000 f81e 	bl	800307c <_isatty_r>
 8003040:	2800      	cmp	r0, #0
 8003042:	d005      	beq.n	8003050 <__smakebuf_r+0x74>
 8003044:	2303      	movs	r3, #3
 8003046:	89a2      	ldrh	r2, [r4, #12]
 8003048:	439a      	bics	r2, r3
 800304a:	3b02      	subs	r3, #2
 800304c:	4313      	orrs	r3, r2
 800304e:	81a3      	strh	r3, [r4, #12]
 8003050:	89a3      	ldrh	r3, [r4, #12]
 8003052:	433b      	orrs	r3, r7
 8003054:	81a3      	strh	r3, [r4, #12]
 8003056:	e7ce      	b.n	8002ff6 <__smakebuf_r+0x1a>

08003058 <_fstat_r>:
 8003058:	2300      	movs	r3, #0
 800305a:	b570      	push	{r4, r5, r6, lr}
 800305c:	4d06      	ldr	r5, [pc, #24]	; (8003078 <_fstat_r+0x20>)
 800305e:	0004      	movs	r4, r0
 8003060:	0008      	movs	r0, r1
 8003062:	0011      	movs	r1, r2
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	f7fd fccd 	bl	8000a04 <_fstat>
 800306a:	1c43      	adds	r3, r0, #1
 800306c:	d103      	bne.n	8003076 <_fstat_r+0x1e>
 800306e:	682b      	ldr	r3, [r5, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d000      	beq.n	8003076 <_fstat_r+0x1e>
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	2000024c 	.word	0x2000024c

0800307c <_isatty_r>:
 800307c:	2300      	movs	r3, #0
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	4d06      	ldr	r5, [pc, #24]	; (800309c <_isatty_r+0x20>)
 8003082:	0004      	movs	r4, r0
 8003084:	0008      	movs	r0, r1
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	f7fd fcca 	bl	8000a20 <_isatty>
 800308c:	1c43      	adds	r3, r0, #1
 800308e:	d103      	bne.n	8003098 <_isatty_r+0x1c>
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d000      	beq.n	8003098 <_isatty_r+0x1c>
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	2000024c 	.word	0x2000024c

080030a0 <_init>:
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a6:	bc08      	pop	{r3}
 80030a8:	469e      	mov	lr, r3
 80030aa:	4770      	bx	lr

080030ac <_fini>:
 80030ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b2:	bc08      	pop	{r3}
 80030b4:	469e      	mov	lr, r3
 80030b6:	4770      	bx	lr
